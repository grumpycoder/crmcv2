!function(){angular.module("app",["app.directives","ui.bootstrap","ui.slider","smart-table"])}();
!function(){function n(n){var e=this;e.$onInit=function(){console.log("censor edit init"),e.resolve&&(e.id=e.resolve.id),e.id&&n.get("api/censor/"+e.id).then(function(n){e.censor=n.data}).catch(function(n){console.log("err",n.message)})},e.cancel=function(){e.dismiss()},e.save=function(){return console.log("save censor",e.censor),n.post("api/censor",e.censor).then(function(n){angular.extend(e.censor,n.data),e.modalInstance.close(e.censor)}).catch(function(n){console.error("something went wrong",n.message)})}}var e=angular.module("app");e.component("censorEdit",{bindings:{item:"<",resolve:"<",close:"&",dismiss:"&",modalInstance:"<"},templateUrl:"app/censors/censor-edit.component.html",controller:["$http",n]})}();
!function(){function n(n,e){var o,t=this,s=10;t.searchModel={page:1,pageSize:s},t.$onInit=function(){console.log("censor list init")},t.create=function(){e.open({component:"censorEdit",bindings:{modalInstance:"<"},resolve:{},size:"md"}).result.then(function(n){t.censors.unshift(n)},function(n){})},t.edit=function(n){e.open({component:"censorEdit",bindings:{modalInstance:"<"},resolve:{id:n.id},size:"md"}).result.then(function(e){angular.extend(n,e)},function(n){})},t.delete=function(e){n.delete("api/censor/"+e.id).then(function(n){var o=t.censors.indexOf(e);t.censors.splice(o,1)})},t.search=function(e){o=e,n.get("api/censor",{params:t.searchModel}).then(function(n){t.censors=n.data.results,t.searchModel=n.data,delete t.searchModel.results})},t.paged=function(){t.search(o)}}var e=angular.module("app");e.component("censorList",{templateUrl:"app/censors/censor-list.component.html",controller:["$http","$uibModal",n]})}();
!function(){function n(n){var o=this;o.$onInit=function(){console.log("configuration setting init"),n.get("api/configuration").then(function(n){o.configuration=n.data,console.log("configuration",o.configuration)})},o.cancel=function(){o.dismiss()},o.save=function(){return console.log("save configuration",o.configuration),n.post("api/configuration",o.configuration).then(function(n){angular.extend(o.configuration,n.data),console.log("return",n)}).catch(function(n){console.error("something went wrong",n.message)})}}var o=angular.module("app");o.component("configurationSetting",{templateUrl:"app/configuration/configuration-setting.component.html",controller:["$http",n]})}();
!function(){angular.module("app.directives",[])}();
!function(){var e=angular.module("app.directives");e.directive("stSubmitSearch",["stConfig","$timeout","$parse",function(e,t,r){return{require:"^stTable",link:function(e,t,r,n){return t.bind("click",function(){console.log("search");var e=n;e.pipe()})}}}]),e.directive("clearKey",function(){return{restrict:"EA",require:"ngModel",link:function(e,t,r,n){t.on("keydown",function(t){27===t.which&&(n.$setViewValue(null),n.$render(),e.$apply())})}}}),e.directive("stResetSearch",function(){return{restrict:"EA",require:["^stTable","^ngModel"],link:function(e,t,r,n){return t.bind("click",function(){var t=n[1],r=n[0];return e.$apply(function(){angular.forEach(t.$viewValue,function(e,r){"page"===r.toLowerCase()&&(t.$viewValue[r]=1),Array.isArray(e)||_.includes(r.toLowerCase(),"page")||(t.$viewValue[r]=null)});var e=r.tableState();return e.search.predicateObject={},e.pagination.start=0,r.pipe()})})}}}),e.directive("stClearKey",function(){return{restrict:"EA",require:["^stTable","^ngModel"],link:function(e,t,r,n){t.on("keydown",function(r){var i=n[1],a=n[0];return 13===r.which?a.pipe():27===r.which?void 0!==t.context.attributes["st-search"]?e.$apply(function(){var e=t.context.attributes["st-search"].value,r=a.tableState();return r.search.predicateObject[e]="",a.pipe()}):e.$apply(function(){i.$setViewValue(null),i.$render()}):void 0})}}})}();
!function(){function e(e){var n=this;n.$onInit=function(){console.log("user edit init",n),n.resolve&&(n.user=n.resolve.user)},n.cancel=function(){n.dismiss()},n.save=function(){return console.log("save user",n.user),e.post("api/user/update",n.user).then(function(e){angular.extend(n.user,e.data),n.modalInstance.close(n.user)}).catch(function(e){console.error("something went wrong",e.message)})}}var n=angular.module("app");n.component("userEdit",{bindings:{item:"<",resolve:"<",close:"&",dismiss:"&",modalInstance:"<"},templateUrl:"app/users/user-edit.component.html",controller:["$http",e]})}();
!function(){function n(n,e){var t=this;t.$onInit=function(){console.log("user list init"),n.get("api/user").then(function(n){t.users=n.data,console.log("users",t.users)})},t.create=function(){e.open({component:"userEdit",bindings:{modalInstance:"<"},resolve:{},size:"md"}).result.then(function(n){t.users.unshift(n)},function(n){})},t.edit=function(n){console.log("user",n),e.open({component:"userEdit",bindings:{modalInstance:"<"},resolve:{user:n},size:"md"}).result.then(function(e){angular.extend(n,e)},function(n){})},t.delete=function(e){n.delete("api/user/"+e.id).then(function(n){var o=t.censors.indexOf(e);t.censors.splice(o,1)})}}var e=angular.module("app");e.component("userList",{templateUrl:"app/users/user-list.component.html",controller:["$http","$uibModal",n]})}();
!function(){function i(i){var o=this;o.$onInit=function(){console.log("visitor edit init"),o.resolve&&(o.id=o.resolve.id),o.id&&i.get("api/visitor/"+o.id).then(function(i){o.visitor=i.data}).catch(function(i){console.log("err",i.message)})},o.cancel=function(){o.dismiss()},o.save=function(){return console.log("save visitor",o.visitor),i.post("api/visitor",o.visitor).then(function(i){angular.extend(o.visitor,i.data),o.modalInstance.close(o.visitor)}).catch(function(i){console.error("something went wrong",i.message)})}}var o=angular.module("app");o.component("visitorEdit",{bindings:{item:"<",resolve:"<",close:"&",dismiss:"&",modalInstance:"<"},templateUrl:"app/visitors/visitor-edit.component.html",controller:["$http",i]})}();
!function(){function i(i,t){var n,e=this,o=10;e.searchModel={page:1,pageSize:o},e.$onInit=function(){console.log("init visitor list")},e.create=function(){t.open({component:"visitorEdit",bindings:{modalInstance:"<"},resolve:{},size:"md"}).result.then(function(i){e.visitors.unshift(i)},function(i){})},e.edit=function(i){t.open({component:"visitorEdit",bindings:{modalInstance:"<"},resolve:{id:i.id},size:"md"}).result.then(function(t){angular.extend(i,t)},function(i){})},e.delete=function(t){i.delete("api/visitor/"+t.id).then(function(i){var n=e.visitors.indexOf(t);e.visitors.splice(n,1)})},e.search=function(t){n=t,i.get("api/visitor",{params:e.searchModel}).then(function(i){e.visitors=i.data.results,e.searchModel=i.data,delete e.searchModel.results})},e.paged=function(){e.search(n)}}var t=angular.module("app");t.component("visitorList",{templateUrl:"app/visitors/visitor-list.component.html",controller:["$http","$uibModal",i]})}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
