!function(){angular.module("app",["app.directives","ui.bootstrap","ui.slider","smart-table","ngTagsInput"])}();
!function(){function n(n){var e=this;e.$onInit=function(){console.log("censor edit init"),e.resolve&&(e.id=e.resolve.id),e.id&&n.get("api/censor/"+e.id).then(function(n){e.censor=n.data}).catch(function(n){console.log("err",n.message)})},e.cancel=function(){e.dismiss()},e.save=function(){return console.log("save censor",e.censor),n.post("api/censor",e.censor).then(function(n){angular.extend(e.censor,n.data),e.modalInstance.close(e.censor)}).catch(function(n){console.error("something went wrong",n.message)})}}var e=angular.module("app");e.component("censorEdit",{bindings:{item:"<",resolve:"<",close:"&",dismiss:"&",modalInstance:"<"},templateUrl:"app/censors/censor-edit.component.html",controller:["$http",n]})}();
!function(){function e(e,n){var o,t=this,s=10;t.searchModel={page:1,pageSize:s},t.$onInit=function(){console.log("censor list init")},t.create=function(){n.open({component:"censorEdit",bindings:{modalInstance:"<"},resolve:{},size:"md"}).result.then(function(e){t.censors.unshift(e)},function(e){})},t.edit=function(e){n.open({component:"censorEdit",bindings:{modalInstance:"<"},resolve:{id:e.id},size:"md"}).result.then(function(n){angular.extend(e,n)},function(e){})},t.delete=function(n){e.delete("api/censor/"+n.id).then(function(e){var o=t.censors.indexOf(n);t.censors.splice(o,1)})},t.search=function(n){o=n,"undefined"!=typeof n.sort.predicate&&(t.searchModel.orderBy=n.sort.predicate,t.searchModel.orderDirection=n.sort.reverse?"desc":"asc"),e.get("api/censor",{params:t.searchModel}).then(function(e){t.censors=e.data.results,t.searchModel=e.data,delete t.searchModel.results})},t.paged=function(){t.search(o)}}var n=angular.module("app");n.component("censorList",{templateUrl:"app/censors/censor-list.component.html",controller:["$http","$uibModal",e]})}();
!function(){function n(n){var o=this,t=$.connection.nameNotificationHub;o.$onInit=function(){console.log("configuration setting init"),$.connection.hub.start().done(function(){console.log("hub connection started")}),n.get("api/configuration").then(function(n){o.configuration=n.data})},o.cancel=function(){o.dismiss()},o.save=function(){return n.post("api/configuration",o.configuration).then(function(n){angular.extend(o.configuration,n.data)}).catch(function(n){console.error("something went wrong",n.message)}).finally(function(){t.server.configurationChange(o.configuration).then(function(n){console.log("configuration sent to hub")})})}}var o=angular.module("app");o.component("configurationSetting",{templateUrl:"app/configuration/configuration-setting.component.html",controller:["$http",n]})}();
!function(){angular.module("app.directives",[])}();
!function(){var e=angular.module("app.directives");e.directive("stSubmitSearch",["stConfig","$timeout","$parse",function(e,t,r){return{require:"^stTable",link:function(e,t,r,n){return t.bind("click",function(){var e=n;e.pipe()})}}}]),e.directive("clearKey",function(){return{restrict:"EA",require:"ngModel",link:function(e,t,r,n){t.on("keydown",function(t){27===t.which&&(n.$setViewValue(null),n.$render(),e.$apply())})}}}),e.directive("stResetSearch",function(){return{restrict:"EA",require:["^stTable","^ngModel"],link:function(e,t,r,n){return t.bind("click",function(){var t=n[1],r=n[0];return e.$apply(function(){angular.forEach(t.$viewValue,function(e,r){"page"===r.toLowerCase()&&(t.$viewValue[r]=1),Array.isArray(e)||_.includes(r.toLowerCase(),"page")||(t.$viewValue[r]=null)});var e=r.tableState();return e.search.predicateObject={},e.pagination.start=0,r.pipe()})})}}}),e.directive("stClearKey",function(){return{restrict:"EA",require:["^stTable","^ngModel"],link:function(e,t,r,n){t.on("keydown",function(r){var i=n[1],a=n[0];return 13===r.which?a.pipe():27===r.which?void 0!==t.context.attributes["st-search"]?e.$apply(function(){var e=t.context.attributes["st-search"].value,r=a.tableState();return r.search.predicateObject[e]="",a.pipe()}):e.$apply(function(){i.$setViewValue(null),i.$render()}):void 0})}}})}();
!function(){angular.module("app").filter("percentage",["$filter",function(n){return function(e,r){return n("number")(100*e,r)+"%"}}])}();
!function(){function e(e){var s=this;s.$onInit=function(){console.log("user edit init"),s.resolve&&(s.user=s.resolve.user),e.get("api/user/roles").then(function(e){s.roles=e.data})},s.cancel=function(){s.dismiss()},s.save=function(){s.user.email||(s.user.email=s.user.userName+"@splcenter.org");var n=[];return _.forEach(s.user.roles,function(e){n.push(e.name)}),0===n.length&&n.push("user"),s.user.roles=n,e.post("api/user/update",s.user).then(function(e){angular.extend(s.user,e.data),s.modalInstance.close(s.user)}).catch(function(e){console.error("something went wrong",e.message)})}}var s=angular.module("app");s.component("userEdit",{bindings:{item:"<",resolve:"<",close:"&",dismiss:"&",modalInstance:"<"},templateUrl:"app/users/user-edit.component.html",controller:["$http",e]})}();
!function(){function e(e,n){var o=this;o.$onInit=function(){o.title="Users",e.get("api/user").then(function(e){o.users=e.data})},o.create=function(){n.open({component:"userEdit",bindings:{modalInstance:"<"},size:"md"}).result.then(function(e){var n=e,t=[];_.forEach(e.roles,function(e){console.log("role",e),t.push(e)}),n.roles=[],console.log("result",n),n.roles=[]=t,console.log("roles",t),console.log("result",n),o.users.unshift(n)},function(e){})},o.edit=function(e){n.open({component:"userEdit",bindings:{modalInstance:"<"},resolve:{user:angular.copy(e)},size:"md"}).result.then(function(n){console.log("result",n),angular.extend(e,n)},function(e){})},o.delete=function(n){e.delete("api/user/"+n.id).then(function(e){var t=o.users.indexOf(n);o.users.splice(t,1)})}}var n=angular.module("app");n.component("userList",{templateUrl:"app/users/user-list.component.html",controller:["$http","$uibModal",e]})}();
!function(){function i(i){var t=this;t.$onInit=function(){console.log("visitor edit init"),t.title="New Visitor",t.resolve&&(t.id=t.resolve.id),t.id&&i.get("api/visitor/"+t.id).then(function(i){t.visitor=i.data,t.title=t.visitor.firstname+" "+t.visitor.lastname}).catch(function(i){console.log("err",i.message)})},t.cancel=function(){t.dismiss()},t.save=function(){return console.log("save visitor",t.visitor),i.post("api/visitor",t.visitor).then(function(i){angular.extend(t.visitor,i.data),t.modalInstance.close(t.visitor)}).catch(function(i){console.error("something went wrong",i.message)})}}var t=angular.module("app");t.component("visitorEdit",{bindings:{item:"<",resolve:"<",close:"&",dismiss:"&",modalInstance:"<"},templateUrl:"app/visitors/visitor-edit.component.html",controller:["$http",i]})}();
!function(){function e(e,t){var i,n=this,o=10;n.searchModel={page:1,pageSize:o},n.$onInit=function(){console.log("init visitor list"),n.title="Visitors"},n.create=function(){t.open({component:"visitorEdit",bindings:{modalInstance:"<"},resolve:{},size:"md"}).result.then(function(e){n.visitors.unshift(e)},function(e){})},n.edit=function(e){t.open({component:"visitorEdit",bindings:{modalInstance:"<"},resolve:{id:e.id},size:"md"}).result.then(function(t){angular.extend(e,t)},function(e){})},n.delete=function(t){e.delete("api/visitor/"+t.id).then(function(e){var i=n.visitors.indexOf(t);n.visitors.splice(i,1)})},n.search=function(t){i=t,n.searchModel.fuzzyMatchRange=n.fuzzyMatchRange,n.searchModel.daysOld=n.days,"undefined"!=typeof t.sort.predicate&&(n.searchModel.orderBy=t.sort.predicate,n.searchModel.orderDirection=t.sort.reverse?"desc":"asc"),e.get("api/visitor",{params:n.searchModel}).then(function(e){n.visitors=e.data.results,n.searchModel=e.data,delete n.searchModel.results})},n.paged=function(){n.search(i)}}var t=angular.module("app");t.component("visitorList",{templateUrl:"app/visitors/visitor-list.component.html",controller:["$http","$uibModal",e]})}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
