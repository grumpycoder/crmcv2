!function(){var t=angular.module("app",["app.directives","ui.bootstrap","ui.slider","smart-table","ngTagsInput","ngAnimate","treasure-overlay-spinner","toastr"]);t.config(["toastrConfig",function(t){angular.extend(t,{positionClass:"toast-bottom-right",newestOnTop:!0,allowHtml:!1,closeButton:!1,closeHtml:"<button>&times;</button>",extendedTimeOut:1e3,iconClasses:{error:"toast-error",info:"toast-info",success:"toast-success",warning:"toast-warning"},messageClass:"toast-message",onHidden:null,onShown:null,onTap:null,progressBar:!1,tapToDismiss:!0,templates:{toast:"directives/toast/toast.html",progressbar:"directives/progressbar/progressbar.html"},timeOut:5e3,titleClass:"toast-title",toastClass:"toast"})}])}();
!function(){function n(n){var e=this;e.$onInit=function(){console.log("censor edit init"),e.resolve&&(e.id=e.resolve.id),e.id&&n.get("api/censor/"+e.id).then(function(n){e.censor=n.data}).catch(function(n){console.log("err",n.message)})},e.cancel=function(){e.dismiss()},e.save=function(){return console.log("save censor",e.censor),n.post("api/censor",e.censor).then(function(n){angular.extend(e.censor,n.data),e.modalInstance.close(e.censor)}).catch(function(n){console.error("something went wrong",n.message)})}}var e=angular.module("app");e.component("censorEdit",{bindings:{item:"<",resolve:"<",close:"&",dismiss:"&",modalInstance:"<"},templateUrl:"app/censors/censor-edit.component.html",controller:["$http",n]})}();
!function(){function e(e,n,o){var s,t=this,c=10;t.searchModel={page:1,pageSize:c},t.$onInit=function(){console.log("censor list init")},t.create=function(){n.open({component:"censorEdit",bindings:{modalInstance:"<"},resolve:{},size:"md"}).result.then(function(e){t.censors.unshift(e),o.success("Saved Censor")},function(e){})},t.edit=function(e){n.open({component:"censorEdit",bindings:{modalInstance:"<"},resolve:{id:e.id},size:"md"}).result.then(function(n){angular.extend(e,n),o.success("Updated Censor")},function(e){})},t.delete=function(n){e.delete("api/censor/"+n.id).then(function(e){var s=t.censors.indexOf(n);t.censors.splice(s,1),o.warning("Deleted censor")})},t.search=function(n){t.loading=!0,s=n,"undefined"!=typeof n.sort.predicate&&(t.searchModel.orderBy=n.sort.predicate,t.searchModel.orderDirection=n.sort.reverse?"desc":"asc"),e.get("api/censor/search",{params:t.searchModel}).then(function(e){console.log("r",e.data),t.censors=e.data.results,t.searchModel=e.data,console.log(t.censors),delete t.searchModel.results}).finally(function(){t.loading=!1})},t.paged=function(){t.search(s)}}var n=angular.module("app");n.component("censorList",{templateUrl:"app/censors/censor-list.component.html",controller:["$http","$uibModal","toastr",e]})}();
!function(){function t(t,n){var o=this,a=$.connection.nameNotificationHub;o.$onInit=function(){console.log("dashboard init"),$.connection.hub.url="http://localhost:49960/signalr",$.connection.hub.start().done(function(){console.log("hub connection started")}),o.refresh()},a.client.addName=function(t,n){o.updateVisitors(n)},o.updateVisitors=function(t){o.visitors.pop();var a={firstname:t.Firstname,lastname:t.Lastname,zipcode:t.Zipcode,dateCreate:t.DateCreated,fuzzyMatchValue:t.FuzzyMatchValue};o.visitors.unshift(a),n.$apply()},o.refresh=function(){o.loading=!0,t.get("api/visitor/summary").then(function(t){o.summary=t.data,o.visitors=t.data.visitors}).catch(function(t){console.error("something went wrong",t)}).finally(function(t){o.loading=!1})}}var n=angular.module("app");n.component("dashboard",{templateUrl:"app/dashboard/dashboard.component.html",controller:["$http","$scope",t]})}();
!function(){function n(n,o){var t=this,i=$.connection.nameNotificationHub;t.$onInit=function(){console.log("configuration setting init"),$.connection.hub.start().done(function(){console.log("hub connection started")}),n.get("api/configuration").then(function(n){t.configuration=n.data,o.success("Loaded configuration")})},t.cancel=function(){t.dismiss()},t.save=function(){return n.post("api/configuration",t.configuration).then(function(n){angular.extend(t.configuration,n.data),o.success("Configuration Saved")}).catch(function(n){console.error("something went wrong",n.message),o.error("Error Saving Configuration")}).finally(function(){i.server.configurationChange(t.configuration).then(function(n){console.log("configuration sent to hub")})})}}var o=angular.module("app");o.component("configurationSetting",{templateUrl:"app/configuration/configuration-setting.component.html",controller:["$http","toastr",n]})}();
!function(){angular.module("app.directives",[])}();
!function(){var e=angular.module("app.directives");e.directive("stSubmitSearch",["stConfig","$timeout","$parse",function(e,t,r){return{require:"^stTable",link:function(e,t,r,n){return t.bind("click",function(){var e=n;e.pipe()})}}}]),e.directive("clearKey",function(){return{restrict:"EA",require:"ngModel",link:function(e,t,r,n){t.on("keydown",function(t){27===t.which&&(n.$setViewValue(null),n.$render(),e.$apply())})}}}),e.directive("stResetSearch",function(){return{restrict:"EA",require:["^stTable","^ngModel"],link:function(e,t,r,n){return t.bind("click",function(){var t=n[1],r=n[0];return e.$apply(function(){angular.forEach(t.$viewValue,function(e,r){"page"===r.toLowerCase()&&(t.$viewValue[r]=1),Array.isArray(e)||_.includes(r.toLowerCase(),"page")||(t.$viewValue[r]=null)});var e=r.tableState();return e.search.predicateObject={},e.pagination.start=0,r.pipe()})})}}}),e.directive("stClearKey",function(){return{restrict:"EA",require:["^stTable","^ngModel"],link:function(e,t,r,n){t.on("keydown",function(r){var i=n[1],a=n[0];return 13===r.which?a.pipe():27===r.which?void 0!==t.context.attributes["st-search"]?e.$apply(function(){var e=t.context.attributes["st-search"].value,r=a.tableState();return r.search.predicateObject[e]="",a.pipe()}):e.$apply(function(){i.$setViewValue(null),i.$render()}):void 0})}}})}();
!function(){angular.module("app").filter("percentage",["$filter",function(n){return function(e,r){return n("number")(100*e,r)+"%"}}])}();
!function(){function e(e){var s=this;s.$onInit=function(){console.log("user edit init"),s.resolve&&(s.user=s.resolve.user),e.get("api/user/roles").then(function(e){s.roles=e.data})},s.cancel=function(){s.dismiss()},s.save=function(){s.user.email||(s.user.email=s.user.userName+"@splcenter.org");var n=[];return _.forEach(s.user.roles,function(e){n.push(e.name)}),0===n.length&&n.push("user"),s.user.roles=n,e.post("api/user/update",s.user).then(function(e){angular.extend(s.user,e.data),s.modalInstance.close(s.user)}).catch(function(e){console.error("something went wrong",e.message)})}}var s=angular.module("app");s.component("userEdit",{bindings:{item:"<",resolve:"<",close:"&",dismiss:"&",modalInstance:"<"},templateUrl:"app/users/user-edit.component.html",controller:["$http",e]})}();
!function(){function e(e,n,s){var t=this;t.$onInit=function(){t.title="Users",e.get("api/user").then(function(e){t.users=e.data})},t.create=function(){n.open({component:"userEdit",bindings:{modalInstance:"<"},size:"md"}).result.then(function(e){var n=e,o=[];_.forEach(e.roles,function(e){console.log("role",e),o.push(e)}),n.roles=[],console.log("result",n),n.roles=[]=o,console.log("roles",o),console.log("result",n),t.users.unshift(n),s.success("Created User")},function(e){})},t.edit=function(e){n.open({component:"userEdit",bindings:{modalInstance:"<"},resolve:{user:angular.copy(e)},size:"md"}).result.then(function(n){angular.extend(e,n),s.success("Updated User")},function(e){})},t.delete=function(n){e.delete("api/user/"+n.id).then(function(e){var o=t.users.indexOf(n);t.users.splice(o,1),s.warning("Deleted User")})}}var n=angular.module("app");n.component("userList",{templateUrl:"app/users/user-list.component.html",controller:["$http","$uibModal","toastr",e]})}();
!function(){function i(i){var t=this;t.$onInit=function(){console.log("visitor edit init"),t.title="New Visitor",t.resolve&&(t.id=t.resolve.id),t.id&&i.get("api/visitor/"+t.id).then(function(i){t.visitor=i.data,t.title=t.visitor.firstname+" "+t.visitor.lastname}).catch(function(i){console.log("err",i.message)})},t.cancel=function(){t.dismiss()},t.save=function(){return console.log("save visitor",t.visitor),i.post("api/visitor",t.visitor).then(function(i){angular.extend(t.visitor,i.data),t.modalInstance.close(t.visitor)}).catch(function(i){console.error("something went wrong",i.message)})}}var t=angular.module("app");t.component("visitorEdit",{bindings:{item:"<",resolve:"<",close:"&",dismiss:"&",modalInstance:"<"},templateUrl:"app/visitors/visitor-edit.component.html",controller:["$http",i]})}();
!function(){function e(e,t,i){var n,o=this,s=10;o.searchModel={page:1,pageSize:s},o.$onInit=function(){console.log("init visitor list"),o.title="Visitors"},o.create=function(){t.open({component:"visitorEdit",bindings:{modalInstance:"<"},resolve:{},size:"md"}).result.then(function(e){o.visitors.unshift(e),i.success("Created Visitor")},function(e){})},o.edit=function(e){t.open({component:"visitorEdit",bindings:{modalInstance:"<"},resolve:{id:e.id},size:"md"}).result.then(function(t){angular.extend(e,t),i.success("Updated Visitor")},function(e){})},o.delete=function(t){e.delete("api/visitor/"+t.id).then(function(e){var n=o.visitors.indexOf(t);o.visitors.splice(n,1),i.warning("Deleted Visitor")})},o.search=function(t){o.loading=!0,n=t,o.searchModel.fuzzyMatchRange=o.fuzzyMatchRange,o.searchModel.daysOld=o.days,"undefined"!=typeof t.sort.predicate&&(o.searchModel.orderBy=t.sort.predicate,o.searchModel.orderDirection=t.sort.reverse?"desc":"asc"),e.get("api/visitor",{params:o.searchModel}).then(function(e){o.visitors=e.data.results,o.searchModel=e.data,delete o.searchModel.results}).finally(function(){o.loading=!1})},o.paged=function(){o.search(n)}}var t=angular.module("app");t.component("visitorList",{templateUrl:"app/visitors/visitor-list.component.html",controller:["$http","$uibModal","toastr",e]})}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
