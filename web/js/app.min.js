!function(){var t=angular.module("app",["app.directives","ui.bootstrap","ui.slider","smart-table","ngTagsInput","toastr"]);t.config(["toastrConfig",function(t){angular.extend(t,{positionClass:"toast-bottom-right",newestOnTop:!0,allowHtml:!1,closeButton:!1,closeHtml:"<button>&times;</button>",extendedTimeOut:1e3,iconClasses:{error:"toast-error",info:"toast-info",success:"toast-success",warning:"toast-warning"},messageClass:"toast-message",onHidden:null,onShown:null,onTap:null,progressBar:!1,tapToDismiss:!0,templates:{toast:"directives/toast/toast.html",progressbar:"directives/progressbar/progressbar.html"},timeOut:5e3,titleClass:"toast-title",toastClass:"toast"})}])}();
!function(){function n(n,o){var t=this,i=$.connection.nameNotificationHub;t.$onInit=function(){console.log("configuration setting init"),$.connection.hub.start().done(function(){console.log("hub connection started")}),n.get("api/configuration").then(function(n){t.configuration=n.data,o.success("Loaded configuration")})},t.cancel=function(){t.dismiss()},t.save=function(){return n.post("api/configuration",t.configuration).then(function(n){angular.extend(t.configuration,n.data),o.success("Configuration Saved")}).catch(function(n){console.error("something went wrong",n.message),o.error("Error Saving Configuration")}).finally(function(){i.server.configurationChange(t.configuration).then(function(n){console.log("configuration sent to hub")})})}}var o=angular.module("app");o.component("configurationSetting",{templateUrl:"app/configuration/configuration-setting.component.html",controller:["$http","toastr",n]})}();
!function(){function n(n){var e=this;e.$onInit=function(){console.log("censor edit init"),e.resolve&&(e.id=e.resolve.id),e.id&&n.get("api/censor/"+e.id).then(function(n){e.censor=n.data}).catch(function(n){console.log("err",n.message)})},e.cancel=function(){e.dismiss()},e.save=function(){return console.log("save censor",e.censor),n.post("api/censor",e.censor).then(function(n){angular.extend(e.censor,n.data),e.modalInstance.close(e.censor)}).catch(function(n){console.error("something went wrong",n.message)})}}var e=angular.module("app");e.component("censorEdit",{bindings:{item:"<",resolve:"<",close:"&",dismiss:"&",modalInstance:"<"},templateUrl:"app/censors/censor-edit.component.html",controller:["$http",n]})}();
!function(){function e(e,n){var o,t=this,s=10;t.searchModel={page:1,pageSize:s},t.$onInit=function(){console.log("censor list init")},t.create=function(){n.open({component:"censorEdit",bindings:{modalInstance:"<"},resolve:{},size:"md"}).result.then(function(e){t.censors.unshift(e)},function(e){})},t.edit=function(e){n.open({component:"censorEdit",bindings:{modalInstance:"<"},resolve:{id:e.id},size:"md"}).result.then(function(n){angular.extend(e,n)},function(e){})},t.delete=function(n){e.delete("api/censor/"+n.id).then(function(e){var o=t.censors.indexOf(n);t.censors.splice(o,1)})},t.search=function(n){o=n,"undefined"!=typeof n.sort.predicate&&(t.searchModel.orderBy=n.sort.predicate,t.searchModel.orderDirection=n.sort.reverse?"desc":"asc"),e.get("api/censor",{params:t.searchModel}).then(function(e){t.censors=e.data.results,t.searchModel=e.data,delete t.searchModel.results})},t.paged=function(){t.search(o)}}var n=angular.module("app");n.component("censorList",{templateUrl:"app/censors/censor-list.component.html",controller:["$http","$uibModal",e]})}();
!function(){function o(o){var n=this;n.$onInit=function(){console.log("dashboard init"),o.get("api/visitor/summary").then(function(o){n.summary=o.data}).catch(function(o){console.error("something went wrong",o)})}}var n=angular.module("app");n.component("dashboard",{templateUrl:"app/dashboard/dashboard.component.html",controller:["$http",o]})}();
!function(){angular.module("app.directives",[])}();
!function(){var e=angular.module("app.directives");e.directive("stSubmitSearch",["stConfig","$timeout","$parse",function(e,t,r){return{require:"^stTable",link:function(e,t,r,n){return t.bind("click",function(){var e=n;e.pipe()})}}}]),e.directive("clearKey",function(){return{restrict:"EA",require:"ngModel",link:function(e,t,r,n){t.on("keydown",function(t){27===t.which&&(n.$setViewValue(null),n.$render(),e.$apply())})}}}),e.directive("stResetSearch",function(){return{restrict:"EA",require:["^stTable","^ngModel"],link:function(e,t,r,n){return t.bind("click",function(){var t=n[1],r=n[0];return e.$apply(function(){angular.forEach(t.$viewValue,function(e,r){"page"===r.toLowerCase()&&(t.$viewValue[r]=1),Array.isArray(e)||_.includes(r.toLowerCase(),"page")||(t.$viewValue[r]=null)});var e=r.tableState();return e.search.predicateObject={},e.pagination.start=0,r.pipe()})})}}}),e.directive("stClearKey",function(){return{restrict:"EA",require:["^stTable","^ngModel"],link:function(e,t,r,n){t.on("keydown",function(r){var i=n[1],a=n[0];return 13===r.which?a.pipe():27===r.which?void 0!==t.context.attributes["st-search"]?e.$apply(function(){var e=t.context.attributes["st-search"].value,r=a.tableState();return r.search.predicateObject[e]="",a.pipe()}):e.$apply(function(){i.$setViewValue(null),i.$render()}):void 0})}}})}();
!function(){angular.module("app").filter("percentage",["$filter",function(n){return function(e,r){return n("number")(100*e,r)+"%"}}])}();
!function(){function e(e){var s=this;s.$onInit=function(){console.log("user edit init"),s.resolve&&(s.user=s.resolve.user),e.get("api/user/roles").then(function(e){s.roles=e.data})},s.cancel=function(){s.dismiss()},s.save=function(){s.user.email||(s.user.email=s.user.userName+"@splcenter.org");var n=[];return _.forEach(s.user.roles,function(e){n.push(e.name)}),0===n.length&&n.push("user"),s.user.roles=n,e.post("api/user/update",s.user).then(function(e){angular.extend(s.user,e.data),s.modalInstance.close(s.user)}).catch(function(e){console.error("something went wrong",e.message)})}}var s=angular.module("app");s.component("userEdit",{bindings:{item:"<",resolve:"<",close:"&",dismiss:"&",modalInstance:"<"},templateUrl:"app/users/user-edit.component.html",controller:["$http",e]})}();
!function(){function e(e,n){var o=this;o.$onInit=function(){o.title="Users",e.get("api/user").then(function(e){o.users=e.data})},o.create=function(){n.open({component:"userEdit",bindings:{modalInstance:"<"},size:"md"}).result.then(function(e){var n=e,t=[];_.forEach(e.roles,function(e){console.log("role",e),t.push(e)}),n.roles=[],console.log("result",n),n.roles=[]=t,console.log("roles",t),console.log("result",n),o.users.unshift(n)},function(e){})},o.edit=function(e){n.open({component:"userEdit",bindings:{modalInstance:"<"},resolve:{user:angular.copy(e)},size:"md"}).result.then(function(n){console.log("result",n),angular.extend(e,n)},function(e){})},o.delete=function(n){e.delete("api/user/"+n.id).then(function(e){var t=o.users.indexOf(n);o.users.splice(t,1)})}}var n=angular.module("app");n.component("userList",{templateUrl:"app/users/user-list.component.html",controller:["$http","$uibModal",e]})}();
!function(){function i(i){var t=this;t.$onInit=function(){console.log("visitor edit init"),t.title="New Visitor",t.resolve&&(t.id=t.resolve.id),t.id&&i.get("api/visitor/"+t.id).then(function(i){t.visitor=i.data,t.title=t.visitor.firstname+" "+t.visitor.lastname}).catch(function(i){console.log("err",i.message)})},t.cancel=function(){t.dismiss()},t.save=function(){return console.log("save visitor",t.visitor),i.post("api/visitor",t.visitor).then(function(i){angular.extend(t.visitor,i.data),t.modalInstance.close(t.visitor)}).catch(function(i){console.error("something went wrong",i.message)})}}var t=angular.module("app");t.component("visitorEdit",{bindings:{item:"<",resolve:"<",close:"&",dismiss:"&",modalInstance:"<"},templateUrl:"app/visitors/visitor-edit.component.html",controller:["$http",i]})}();
!function(){function e(e,t){var i,n=this,o=10;n.searchModel={page:1,pageSize:o},n.$onInit=function(){console.log("init visitor list"),n.title="Visitors"},n.create=function(){t.open({component:"visitorEdit",bindings:{modalInstance:"<"},resolve:{},size:"md"}).result.then(function(e){n.visitors.unshift(e)},function(e){})},n.edit=function(e){t.open({component:"visitorEdit",bindings:{modalInstance:"<"},resolve:{id:e.id},size:"md"}).result.then(function(t){angular.extend(e,t)},function(e){})},n.delete=function(t){e.delete("api/visitor/"+t.id).then(function(e){var i=n.visitors.indexOf(t);n.visitors.splice(i,1)})},n.search=function(t){i=t,n.searchModel.fuzzyMatchRange=n.fuzzyMatchRange,n.searchModel.daysOld=n.days,"undefined"!=typeof t.sort.predicate&&(n.searchModel.orderBy=t.sort.predicate,n.searchModel.orderDirection=t.sort.reverse?"desc":"asc"),e.get("api/visitor",{params:n.searchModel}).then(function(e){n.visitors=e.data.results,n.searchModel=e.data,delete n.searchModel.results})},n.paged=function(){n.search(i)}}var t=angular.module("app");t.component("visitorList",{templateUrl:"app/visitors/visitor-list.component.html",controller:["$http","$uibModal",e]})}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5tb2R1bGUuanMiLCJjb25maWd1cmF0aW9uL2NvbmZpZ3VyYXRpb24tc2V0dGluZy5jb21wb25lbnQuanMiLCJjZW5zb3JzL2NlbnNvci1lZGl0LmNvbXBvbmVudC5qcyIsImNlbnNvcnMvY2Vuc29yLWxpc3QuY29tcG9uZW50LmpzIiwiZGFzaGJvYXJkL2Rhc2hib2FyZC5jb21wb25lbnQuanMiLCJkaXJlY3RpdmVzL2RpcmVjdGl2ZXMubW9kdWxlcy5qcyIsImRpcmVjdGl2ZXMvc3RUYWJsZS5kaXJlY3RpdmUuanMiLCJmaWx0ZXJzL2ZpbHRlcnMuanMiLCJ1c2Vycy91c2VyLWVkaXQuY29tcG9uZW50LmpzIiwidXNlcnMvdXNlci1saXN0LmNvbXBvbmVudC5qcyIsInZpc2l0b3JzL3Zpc2l0b3ItZWRpdC5jb21wb25lbnQuanMiLCJ2aXNpdG9ycy92aXNpdG9yLWxpc3QuY29tcG9uZW50LmpzIl0sIm5hbWVzIjpbIm1vZHVsZSIsImFuZ3VsYXIiLCJjb25maWciLCJ0b2FzdHJDb25maWciLCJleHRlbmQiLCJwb3NpdGlvbkNsYXNzIiwibmV3ZXN0T25Ub3AiLCJhbGxvd0h0bWwiLCJjbG9zZUJ1dHRvbiIsImNsb3NlSHRtbCIsImV4dGVuZGVkVGltZU91dCIsImljb25DbGFzc2VzIiwiZXJyb3IiLCJpbmZvIiwic3VjY2VzcyIsIndhcm5pbmciLCJtZXNzYWdlQ2xhc3MiLCJvbkhpZGRlbiIsIm9uU2hvd24iLCJvblRhcCIsInByb2dyZXNzQmFyIiwidGFwVG9EaXNtaXNzIiwidGVtcGxhdGVzIiwidG9hc3QiLCJwcm9ncmVzc2JhciIsInRpbWVPdXQiLCJ0aXRsZUNsYXNzIiwidG9hc3RDbGFzcyIsImNvbnRyb2xsZXIiLCIkaHR0cCIsInRvYXN0ciIsIiRjdHJsIiwidGhpcyIsImh1YiIsIiQiLCJjb25uZWN0aW9uIiwibmFtZU5vdGlmaWNhdGlvbkh1YiIsIiRvbkluaXQiLCJjb25zb2xlIiwibG9nIiwic3RhcnQiLCJkb25lIiwiZ2V0IiwidGhlbiIsInIiLCJjb25maWd1cmF0aW9uIiwiZGF0YSIsImNhbmNlbCIsImRpc21pc3MiLCJzYXZlIiwicG9zdCIsImNhdGNoIiwiZXJyIiwibWVzc2FnZSIsImZpbmFsbHkiLCJzZXJ2ZXIiLCJjb25maWd1cmF0aW9uQ2hhbmdlIiwiY29tcG9uZW50IiwidGVtcGxhdGVVcmwiLCJyZXNvbHZlIiwiaWQiLCJjZW5zb3IiLCJtb2RhbEluc3RhbmNlIiwiY2xvc2UiLCJiaW5kaW5ncyIsIml0ZW0iLCIkbW9kYWwiLCJ0YWJsZVN0YXRlUmVmIiwicGFnZVNpemVEZWZhdWx0Iiwic2VhcmNoTW9kZWwiLCJwYWdlIiwicGFnZVNpemUiLCJjcmVhdGUiLCJvcGVuIiwic2l6ZSIsInJlc3VsdCIsImNlbnNvcnMiLCJ1bnNoaWZ0IiwicmVhc29uIiwiZWRpdCIsImMiLCJkZWxldGUiLCJpZHgiLCJpbmRleE9mIiwic3BsaWNlIiwic2VhcmNoIiwidGFibGVTdGF0ZSIsInNvcnQiLCJvcmRlckJ5IiwicHJlZGljYXRlIiwib3JkZXJEaXJlY3Rpb24iLCJyZXZlcnNlIiwicGFyYW1zIiwicmVzdWx0cyIsInBhZ2VkIiwic3VtbWFyeSIsImRpcmVjdGl2ZSIsInN0Q29uZmlnIiwiJHRpbWVvdXQiLCIkcGFyc2UiLCJyZXF1aXJlIiwibGluayIsInNjb3BlIiwiZWxlbWVudCIsImF0dHIiLCJjdHJsIiwiYmluZCIsInRhYmxlQ3RybCIsInBpcGUiLCJyZXN0cmljdCIsImVsIiwiYXR0cnMiLCJvbiIsImV2ZW50Iiwid2hpY2giLCIkc2V0Vmlld1ZhbHVlIiwiJHJlbmRlciIsIiRhcHBseSIsImN0cmxzIiwibW9kZWwiLCJmb3JFYWNoIiwiJHZpZXdWYWx1ZSIsInZhbHVlIiwia2V5IiwidG9Mb3dlckNhc2UiLCJBcnJheSIsImlzQXJyYXkiLCJfIiwiaW5jbHVkZXMiLCJwcmVkaWNhdGVPYmplY3QiLCJwYWdpbmF0aW9uIiwibmdNb2RlbCIsInVuZGVmaW5lZCIsImNvbnRleHQiLCJhdHRyaWJ1dGVzIiwiZmllbGROYW1lIiwiZmlsdGVyIiwiJGZpbHRlciIsImlucHV0IiwiZGVjaW1hbHMiLCJ1c2VyIiwicm9sZXMiLCJlbWFpbCIsInVzZXJOYW1lIiwicm9sZSIsInB1c2giLCJuYW1lIiwibGVuZ3RoIiwidGl0bGUiLCJ1c2VycyIsImNvcHkiLCJ2aXNpdG9yIiwiZmlyc3RuYW1lIiwibGFzdG5hbWUiLCJ2aXNpdG9ycyIsInYiLCJmdXp6eU1hdGNoUmFuZ2UiLCJkYXlzT2xkIiwiZGF5cyJdLCJtYXBwaW5ncyI6IkNBQ0EsV0FDSSxHQUFJQSxHQUFTQyxRQUFRRCxPQUFPLE9BQ3hCLGlCQUNBLGVBQ0EsWUFDQSxjQUNBLGNBQ0EsVUFHSkEsR0FBT0UsUUFBUSxlQUFnQixTQUFVQyxHQUNyQ0YsUUFBUUcsT0FBT0QsR0FDWEUsY0FBZSxxQkFDZkMsYUFBYSxFQUNiQyxXQUFXLEVBQ1hDLGFBQWEsRUFDYkMsVUFBVywyQkFDWEMsZ0JBQWlCLElBQ2pCQyxhQUNJQyxNQUFPLGNBQ1BDLEtBQU0sYUFDTkMsUUFBUyxnQkFDVEMsUUFBUyxpQkFFYkMsYUFBYyxnQkFDZEMsU0FBVSxLQUNWQyxRQUFTLEtBQ1RDLE1BQU8sS0FDUEMsYUFBYSxFQUNiQyxjQUFjLEVBQ2RDLFdBQ0lDLE1BQU8sOEJBQ1BDLFlBQWEsMkNBRWpCQyxRQUFTLElBQ1RDLFdBQVksY0FDWkMsV0FBWTtDQ3BDeEIsV0FHSSxRQUFTQyxHQUFXQyxFQUFPQyxHQUN2QixHQUFJQyxHQUFRQyxLQUNSQyxFQUFNQyxFQUFFQyxXQUFXQyxtQkFFdkJMLEdBQU1NLFFBQVUsV0FDWkMsUUFBUUMsSUFBSSw4QkFDWkwsRUFBRUMsV0FBV0YsSUFBSU8sUUFBUUMsS0FBSyxXQUFZSCxRQUFRQyxJQUFJLDRCQUN0RFYsRUFBTWEsSUFBSSxxQkFBcUJDLEtBQUssU0FBVUMsR0FDMUNiLEVBQU1jLGNBQWdCRCxFQUFFRSxLQUN4QmhCLEVBQU9oQixRQUFRLDJCQUl2QmlCLEVBQU1nQixPQUFTLFdBQ1hoQixFQUFNaUIsV0FHVmpCLEVBQU1rQixLQUFPLFdBQ1QsTUFB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LFlBQVl3QixXQUlqQzlELEVBQU0rRCxNQUFRLFdBQ1YvRCxFQUFNc0QsT0FBT2xCLElBekVyQixHQUFJbkUsR0FBU0MsUUFBUUQsT0FBTyxNQThFNUJBLEdBQU95RCxVQUFVLGVBRVRDLFlBQWEsMkNBQ2I5QixZQUFhLFFBQVMsWUFBYUEiLCJmaWxlIjoiYXBwLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vYXBwLm1vZHVsZS5qc1xyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIG1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKCdhcHAnLCBbXHJcbiAgICAgICAgJ2FwcC5kaXJlY3RpdmVzJyxcclxuICAgICAgICAndWkuYm9vdHN0cmFwJyxcclxuICAgICAgICAndWkuc2xpZGVyJyxcclxuICAgICAgICAnc21hcnQtdGFibGUnLFxyXG4gICAgICAgICduZ1RhZ3NJbnB1dCcsXHJcbiAgICAgICAgJ3RvYXN0cidcclxuICAgIF0pO1xyXG5cclxuICAgIG1vZHVsZS5jb25maWcoWyd0b2FzdHJDb25maWcnLCBmdW5jdGlvbiAodG9hc3RyQ29uZmlnKSB7XHJcbiAgICAgICAgYW5ndWxhci5leHRlbmQodG9hc3RyQ29uZmlnLCB7XHJcbiAgICAgICAgICAgIHBvc2l0aW9uQ2xhc3M6ICd0b2FzdC1ib3R0b20tcmlnaHQnLFxyXG4gICAgICAgICAgICBuZXdlc3RPblRvcDogdHJ1ZSxcclxuICAgICAgICAgICAgYWxsb3dIdG1sOiBmYWxzZSxcclxuICAgICAgICAgICAgY2xvc2VCdXR0b246IGZhbHNlLFxyXG4gICAgICAgICAgICBjbG9zZUh0bWw6ICc8YnV0dG9uPiZ0aW1lczs8L2J1dHRvbj4nLFxyXG4gICAgICAgICAgICBleHRlbmRlZFRpbWVPdXQ6IDEwMDAsXHJcbiAgICAgICAgICAgIGljb25DbGFzc2VzOiB7XHJcbiAgICAgICAgICAgICAgICBlcnJvcjogJ3RvYXN0LWVycm9yJyxcclxuICAgICAgICAgICAgICAgIGluZm86ICd0b2FzdC1pbmZvJyxcclxuICAgICAgICAgICAgICAgIHN1Y2Nlc3M6ICd0b2FzdC1zdWNjZXNzJyxcclxuICAgICAgICAgICAgICAgIHdhcm5pbmc6ICd0b2FzdC13YXJuaW5nJ1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBtZXNzYWdlQ2xhc3M6ICd0b2FzdC1tZXNzYWdlJyxcclxuICAgICAgICAgICAgb25IaWRkZW46IG51bGwsXHJcbiAgICAgICAgICAgIG9uU2hvd246IG51bGwsXHJcbiAgICAgICAgICAgIG9uVGFwOiBudWxsLFxyXG4gICAgICAgICAgICBwcm9ncmVzc0JhcjogZmFsc2UsXHJcbiAgICAgICAgICAgIHRhcFRvRGlzbWlzczogdHJ1ZSxcclxuICAgICAgICAgICAgdGVtcGxhdGVzOiB7XHJcbiAgICAgICAgICAgICAgICB0b2FzdDogJ2RpcmVjdGl2ZXMvdG9hc3QvdG9hc3QuaHRtbCcsXHJcbiAgICAgICAgICAgICAgICBwcm9ncmVzc2JhcjogJ2RpcmVjdGl2ZXMvcHJvZ3Jlc3NiYXIvcHJvZ3Jlc3NiYXIuaHRtbCdcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgdGltZU91dDogNTAwMCxcclxuICAgICAgICAgICAgdGl0bGVDbGFzczogJ3RvYXN0LXRpdGxlJyxcclxuICAgICAgICAgICAgdG9hc3RDbGFzczogJ3RvYXN0J1xyXG4gICAgICAgIH0pO1xyXG4gICAgfV0pO1xyXG5cclxufVxyXG4pKCk7IiwiLy9jb25maWd1cmF0aW9uLXNldHRpbmcuY29tcG9uZW50LmpzXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgbW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ2FwcCcpO1xyXG5cclxuICAgIGZ1bmN0aW9uIGNvbnRyb2xsZXIoJGh0dHAsIHRvYXN0cikge1xyXG4gICAgICAgIHZhciAkY3RybCA9IHRoaXM7XHJcbiAgICAgICAgdmFyIGh1YiA9ICQuY29ubmVjdGlvbi5uYW1lTm90aWZpY2F0aW9uSHViO1xyXG5cclxuICAgICAgICAkY3RybC4kb25Jbml0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnY29uZmlndXJhdGlvbiBzZXR0aW5nIGluaXQnKTtcclxuICAgICAgICAgICAgJC5jb25uZWN0aW9uLmh1Yi5zdGFydCgpLmRvbmUoZnVuY3Rpb24oKXsgY29uc29sZS5sb2coJ2h1YiBjb25uZWN0aW9uIHN0YXJ0ZWQnKTsgfSk7XHJcbiAgICAgICAgICAgICRodHRwLmdldCgnYXBpL2NvbmZpZ3VyYXRpb24nKS50aGVuKGZ1bmN0aW9uIChyKSB7XHJcbiAgICAgICAgICAgICAgICAkY3RybC5jb25maWd1cmF0aW9uID0gci5kYXRhO1xyXG4gICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoJ0xvYWRlZCBjb25maWd1cmF0aW9uJyk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgJGN0cmwuY2FuY2VsID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAkY3RybC5kaXNtaXNzKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAkY3RybC5zYXZlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gJGh0dHAucG9zdCgnYXBpL2NvbmZpZ3VyYXRpb24nLCAkY3RybC5jb25maWd1cmF0aW9uKS50aGVuKGZ1bmN0aW9uIChyKSB7XHJcbiAgICAgICAgICAgICAgICBhbmd1bGFyLmV4dGVuZCgkY3RybC5jb25maWd1cmF0aW9uLCByLmRhdGEpO1xyXG4gICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoJ0NvbmZpZ3VyYXRpb24gU2F2ZWQnKTtcclxuICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycikge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignc29tZXRoaW5nIHdlbnQgd3JvbmcnLCBlcnIubWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoJ0Vycm9yIFNhdmluZyBDb25maWd1cmF0aW9uJyk7XHJcbiAgICAgICAgICAgIH0pLmZpbmFsbHkoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgaHViLnNlcnZlci5jb25maWd1cmF0aW9uQ2hhbmdlKCRjdHJsLmNvbmZpZ3VyYXRpb24pLnRoZW4oZnVuY3Rpb24gKHIpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnY29uZmlndXJhdGlvbiBzZW50IHRvIGh1YicpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG1vZHVsZS5jb21wb25lbnQoJ2NvbmZpZ3VyYXRpb25TZXR0aW5nJyxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnYXBwL2NvbmZpZ3VyYXRpb24vY29uZmlndXJhdGlvbi1zZXR0aW5nLmNvbXBvbmVudC5odG1sJyxcclxuICAgICAgICAgICAgY29udHJvbGxlcjogWyckaHR0cCcsICd0b2FzdHInLCBjb250cm9sbGVyXVxyXG4gICAgICAgIH0pO1xyXG59XHJcbikoKTsiLCIvL2NlbnNvci1lZGl0LmNvbXBvbmVudC5qc1xyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIG1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKCdhcHAnKTtcclxuXHJcbiAgICBmdW5jdGlvbiBjb250cm9sbGVyKCRodHRwKSB7XHJcbiAgICAgICAgdmFyICRjdHJsID0gdGhpcztcclxuXHJcbiAgICAgICAgJGN0cmwuJG9uSW5pdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coJ2NlbnNvciBlZGl0IGluaXQnKTtcclxuXHJcbiAgICAgICAgICAgIGlmICgkY3RybC5yZXNvbHZlKSB7XHJcbiAgICAgICAgICAgICAgICAkY3RybC5pZCA9ICRjdHJsLnJlc29sdmUuaWQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKCRjdHJsLmlkKSB7XHJcbiAgICAgICAgICAgICAgICAkaHR0cC5nZXQoJ2FwaS9jZW5zb3IvJyArICRjdHJsLmlkKS50aGVuKGZ1bmN0aW9uIChyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJGN0cmwuY2Vuc29yID0gci5kYXRhO1xyXG4gICAgICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycikge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdlcnInLCBlcnIubWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICRjdHJsLmNhbmNlbCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgJGN0cmwuZGlzbWlzcygpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgJGN0cmwuc2F2ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coJ3NhdmUgY2Vuc29yJywgJGN0cmwuY2Vuc29yKTtcclxuICAgICAgICAgICAgcmV0dXJuICRodHRwLnBvc3QoJ2FwaS9jZW5zb3InLCAkY3RybC5jZW5zb3IpLnRoZW4oZnVuY3Rpb24gKHIpIHtcclxuICAgICAgICAgICAgICAgIGFuZ3VsYXIuZXh0ZW5kKCRjdHJsLmNlbnNvciwgci5kYXRhKTtcclxuICAgICAgICAgICAgICAgICRjdHJsLm1vZGFsSW5zdGFuY2UuY2xvc2UoJGN0cmwuY2Vuc29yKTtcclxuICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycikge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignc29tZXRoaW5nIHdlbnQgd3JvbmcnLCBlcnIubWVzc2FnZSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcblxyXG4gICAgbW9kdWxlLmNvbXBvbmVudCgnY2Vuc29yRWRpdCcsXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBiaW5kaW5nczoge1xyXG4gICAgICAgICAgICAgICAgaXRlbTogJzwnLFxyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZTogJzwnLFxyXG4gICAgICAgICAgICAgICAgY2xvc2U6ICcmJyxcclxuICAgICAgICAgICAgICAgIGRpc21pc3M6ICcmJyxcclxuICAgICAgICAgICAgICAgIG1vZGFsSW5zdGFuY2U6ICc8J1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2FwcC9jZW5zb3JzL2NlbnNvci1lZGl0LmNvbXBvbmVudC5odG1sJyxcclxuICAgICAgICAgICAgY29udHJvbGxlcjogWyckaHR0cCcsIGNvbnRyb2xsZXJdXHJcbiAgICAgICAgfSk7XHJcbn1cclxuKSgpOyIsIi8vY2Vuc29yLWxpc3QuY29tcG9uZW50LmpzXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgbW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ2FwcCcpO1xyXG5cclxuICAgIGZ1bmN0aW9uIGNvbnRyb2xsZXIoJGh0dHAsICRtb2RhbCkge1xyXG4gICAgICAgIHZhciAkY3RybCA9IHRoaXM7XHJcbiAgICAgICAgdmFyIHBhZ2VTaXplRGVmYXVsdCA9IDEwO1xyXG4gICAgICAgIHZhciB0YWJsZVN0YXRlUmVmO1xyXG5cclxuICAgICAgICAkY3RybC5zZWFyY2hNb2RlbCA9IHtcclxuICAgICAgICAgICAgcGFnZTogMSxcclxuICAgICAgICAgICAgcGFnZVNpemU6IHBhZ2VTaXplRGVmYXVsdFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgICRjdHJsLiRvbkluaXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdjZW5zb3IgbGlzdCBpbml0Jyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAkY3RybC5jcmVhdGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICRtb2RhbC5vcGVuKHtcclxuICAgICAgICAgICAgICAgIGNvbXBvbmVudDogJ2NlbnNvckVkaXQnLFxyXG4gICAgICAgICAgICAgICAgYmluZGluZ3M6IHtcclxuICAgICAgICAgICAgICAgICAgICBtb2RhbEluc3RhbmNlOiBcIjxcIlxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHJlc29sdmU6IHtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBzaXplOiAnbWQnXHJcbiAgICAgICAgICAgIH0pLnJlc3VsdC50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcclxuICAgICAgICAgICAgICAgICRjdHJsLmNlbnNvcnMudW5zaGlmdChyZXN1bHQpO1xyXG4gICAgICAgICAgICB9LCBmdW5jdGlvbiAocmVhc29uKSB7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgJGN0cmwuZWRpdCA9IGZ1bmN0aW9uIChjKSB7XHJcbiAgICAgICAgICAgICRtb2RhbC5vcGVuKHtcclxuICAgICAgICAgICAgICAgIGNvbXBvbmVudDogJ2NlbnNvckVkaXQnLFxyXG4gICAgICAgICAgICAgICAgYmluZGluZ3M6IHtcclxuICAgICAgICAgICAgICAgICAgICBtb2RhbEluc3RhbmNlOiBcIjxcIlxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHJlc29sdmU6IHtcclxuICAgICAgICAgICAgICAgICAgICBpZDogYy5pZFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHNpemU6ICdtZCdcclxuICAgICAgICAgICAgfSkucmVzdWx0LnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgYW5ndWxhci5leHRlbmQoYywgcmVzdWx0KTtcclxuICAgICAgICAgICAgfSwgZnVuY3Rpb24gKHJlYXNvbikge1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICRjdHJsLmRlbGV0ZSA9IGZ1bmN0aW9uIChjKSB7XHJcbiAgICAgICAgICAgICRodHRwLmRlbGV0ZSgnYXBpL2NlbnNvci8nICsgYy5pZCkudGhlbihmdW5jdGlvbiAocikge1xyXG4gICAgICAgICAgICAgICAgdmFyIGlkeCA9ICRjdHJsLmNlbnNvcnMuaW5kZXhPZihjKTtcclxuICAgICAgICAgICAgICAgICRjdHJsLmNlbnNvcnMuc3BsaWNlKGlkeCwgMSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgJGN0cmwuc2VhcmNoID0gZnVuY3Rpb24gKHRhYmxlU3RhdGUpIHtcclxuICAgICAgICAgICAgdGFibGVTdGF0ZVJlZiA9IHRhYmxlU3RhdGU7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgKHRhYmxlU3RhdGUuc29ydC5wcmVkaWNhdGUpICE9PSBcInVuZGVmaW5lZFwiKSB7XHJcbiAgICAgICAgICAgICAgICAkY3RybC5zZWFyY2hNb2RlbC5vcmRlckJ5ID0gdGFibGVTdGF0ZS5zb3J0LnByZWRpY2F0ZTtcclxuICAgICAgICAgICAgICAgICRjdHJsLnNlYXJjaE1vZGVsLm9yZGVyRGlyZWN0aW9uID0gdGFibGVTdGF0ZS5zb3J0LnJldmVyc2UgPyAnZGVzYycgOiAnYXNjJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAkaHR0cC5nZXQoJ2FwaS9jZW5zb3InLCB7IHBhcmFtczogJGN0cmwuc2VhcmNoTW9kZWwgfSkudGhlbihmdW5jdGlvbiAocikge1xyXG4gICAgICAgICAgICAgICAgJGN0cmwuY2Vuc29ycyA9IHIuZGF0YS5yZXN1bHRzO1xyXG4gICAgICAgICAgICAgICAgJGN0cmwuc2VhcmNoTW9kZWwgPSByLmRhdGE7XHJcbiAgICAgICAgICAgICAgICBkZWxldGUgJGN0cmwuc2VhcmNoTW9kZWwucmVzdWx0cztcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAkY3RybC5wYWdlZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgJGN0cmwuc2VhcmNoKHRhYmxlU3RhdGVSZWYpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBtb2R1bGUuY29tcG9uZW50KCdjZW5zb3JMaXN0JyxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnYXBwL2NlbnNvcnMvY2Vuc29yLWxpc3QuY29tcG9uZW50Lmh0bWwnLFxyXG4gICAgICAgICAgICBjb250cm9sbGVyOiBbJyRodHRwJywgJyR1aWJNb2RhbCcsIGNvbnRyb2xsZXJdXHJcbiAgICAgICAgfSk7XHJcbn1cclxuKSgpOyIsIi8vZGFzaGJvYXJkLmNvbXBvbmVudC5qc1xyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIG1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKCdhcHAnKTtcclxuXHJcbiAgICBmdW5jdGlvbiBjb250cm9sbGVyKCRodHRwKSB7XHJcbiAgICAgICAgdmFyICRjdHJsID0gdGhpcztcclxuXHJcbiAgICAgICAgJGN0cmwuJG9uSW5pdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coJ2Rhc2hib2FyZCBpbml0Jyk7XHJcbiAgICAgICAgICAgICRodHRwLmdldCgnYXBpL3Zpc2l0b3Ivc3VtbWFyeScpLnRoZW4oZnVuY3Rpb24gKHIpIHtcclxuICAgICAgICAgICAgICAgICRjdHJsLnN1bW1hcnkgPSByLmRhdGE7XHJcbiAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ3NvbWV0aGluZyB3ZW50IHdyb25nJywgZXJyKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG1vZHVsZS5jb21wb25lbnQoJ2Rhc2hib2FyZCcsXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2FwcC9kYXNoYm9hcmQvZGFzaGJvYXJkLmNvbXBvbmVudC5odG1sJyxcclxuICAgICAgICAgICAgY29udHJvbGxlcjogWyckaHR0cCcsIGNvbnRyb2xsZXJdXHJcbiAgICAgICAgfSk7XHJcblxyXG59XHJcbikoKTsiLCIvL2RpcmVjdGl2ZXMubW9kdWxlcy5qc1xyXG4oZnVuY3Rpb24oKSB7XHJcbiAgICBhbmd1bGFyLm1vZHVsZSgnYXBwLmRpcmVjdGl2ZXMnLCBbXSk7IFxyXG59KSgpOyIsIi8vc3RUYWJsZS5kaXJlY3RpdmUuanNcclxuKGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICB2YXIgbW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ2FwcC5kaXJlY3RpdmVzJyk7XHJcblxyXG4gICAgbW9kdWxlLmRpcmVjdGl2ZSgnc3RTdWJtaXRTZWFyY2gnLCBbJ3N0Q29uZmlnJywgJyR0aW1lb3V0JywgJyRwYXJzZScsIGZ1bmN0aW9uIChzdENvbmZpZywgJHRpbWVvdXQsICRwYXJzZSkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHJlcXVpcmU6ICdec3RUYWJsZScsXHJcbiAgICAgICAgICAgIGxpbms6IGZ1bmN0aW9uIChzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnQuYmluZCgnY2xpY2snLFxyXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRhYmxlQ3RybCA9IGN0cmw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhYmxlQ3RybC5waXBlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgIH1dKTtcclxuXHJcbiAgICBtb2R1bGUuZGlyZWN0aXZlKFwiY2xlYXJLZXlcIiwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHJlc3RyaWN0OiAnRUEnLFxyXG4gICAgICAgICAgICByZXF1aXJlOiAnbmdNb2RlbCcsXHJcbiAgICAgICAgICAgIGxpbms6IGZ1bmN0aW9uIChzY29wZSwgZWwsIGF0dHJzLCBjdHJsKSB7XHJcbiAgICAgICAgICAgICAgICBlbC5vbigna2V5ZG93bicsIGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChldmVudC53aGljaCAhPT0gMjcpIHsgcmV0dXJuOyB9IC8vIGNoZWNrIGtleSBob3cgeW91IHdhbnRcclxuICAgICAgICAgICAgICAgICAgICBjdHJsLiRzZXRWaWV3VmFsdWUobnVsbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY3RybC4kcmVuZGVyKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgc2NvcGUuJGFwcGx5KCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICB9KTtcclxuXHJcblxyXG4gICAgbW9kdWxlLmRpcmVjdGl2ZShcInN0UmVzZXRTZWFyY2hcIixcclxuICAgICAgICAgICAgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICByZXN0cmljdDogJ0VBJyxcclxuICAgICAgICAgICAgICAgICAgICByZXF1aXJlOiBbJ15zdFRhYmxlJywgJ15uZ01vZGVsJ10sXHJcbiAgICAgICAgICAgICAgICAgICAgbGluazogZnVuY3Rpb24gKHNjb3BlLCBlbGVtZW50LCBhdHRycywgY3RybHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnQuYmluZCgnY2xpY2snLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtb2RlbCA9IGN0cmxzWzFdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjdHJsID0gY3RybHNbMF07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzY29wZS4kYXBwbHkoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2gobW9kZWwuJHZpZXdWYWx1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uICh2YWx1ZSwga2V5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGtleS50b0xvd2VyQ2FzZSgpID09PSAncGFnZScpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuJHZpZXdWYWx1ZVtrZXldID0gMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpIHx8IF8uaW5jbHVkZXMoa2V5LnRvTG93ZXJDYXNlKCksICdwYWdlJykpIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC4kdmlld1ZhbHVlW2tleV0gPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0YWJsZVN0YXRlID0gY3RybC50YWJsZVN0YXRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhYmxlU3RhdGUuc2VhcmNoLnByZWRpY2F0ZU9iamVjdCA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YWJsZVN0YXRlLnBhZ2luYXRpb24uc3RhcnQgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3RybC5waXBlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICBtb2R1bGUuZGlyZWN0aXZlKFwic3RDbGVhcktleVwiLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgcmVzdHJpY3Q6ICdFQScsXHJcbiAgICAgICAgICAgIHJlcXVpcmU6IFsnXnN0VGFibGUnLCAnXm5nTW9kZWwnXSxcclxuICAgICAgICAgICAgbGluazogZnVuY3Rpb24gKHNjb3BlLCBlbGVtZW50LCBhdHRycywgY3RybHMpIHtcclxuICAgICAgICAgICAgICAgIGVsZW1lbnQub24oJ2tleWRvd24nLCBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbmdNb2RlbCA9IGN0cmxzWzFdO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjdHJsID0gY3RybHNbMF07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChldmVudC53aGljaCA9PT0gMTMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGN0cmwucGlwZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnQud2hpY2ggPT09IDI3KSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZWxlbWVudC5jb250ZXh0LmF0dHJpYnV0ZXNbJ3N0LXNlYXJjaCddICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzY29wZS4kYXBwbHkoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmaWVsZE5hbWUgPSBlbGVtZW50LmNvbnRleHQuYXR0cmlidXRlc1snc3Qtc2VhcmNoJ10udmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRhYmxlU3RhdGUgPSBjdHJsLnRhYmxlU3RhdGUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YWJsZVN0YXRlLnNlYXJjaC5wcmVkaWNhdGVPYmplY3RbZmllbGROYW1lXSA9ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjdHJsLnBpcGUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzY29wZS4kYXBwbHkoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5nTW9kZWwuJHNldFZpZXdWYWx1ZShudWxsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZ01vZGVsLiRyZW5kZXIoKTsgLy8gd2lsbCB1cGRhdGUgdGhlIGlucHV0IHZhbHVlIGFzIHdlbGxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgIH0pO1xyXG5cclxufVxyXG4pKCk7IiwiLy9maWx0ZXJzLmpzXHJcbihmdW5jdGlvbigpIHtcclxuICAgIGFuZ3VsYXIubW9kdWxlKCdhcHAnKS5maWx0ZXIoJ3BlcmNlbnRhZ2UnLCBbJyRmaWx0ZXInLCBmdW5jdGlvbiAoJGZpbHRlcikge1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoaW5wdXQsIGRlY2ltYWxzKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAkZmlsdGVyKCdudW1iZXInKShpbnB1dCAqIDEwMCwgZGVjaW1hbHMpICsgJyUnO1xyXG4gICAgICAgIH07XHJcbiAgICB9XSk7XHJcbiAgICB9XHJcbikoKTsiLCIvL3VzZXItZWRpdC5jb21wb25lbnQuanNcclxuKGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBtb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSgnYXBwJyk7XHJcblxyXG4gICAgZnVuY3Rpb24gY29udHJvbGxlcigkaHR0cCkge1xyXG4gICAgICAgIHZhciAkY3RybCA9IHRoaXM7XHJcblxyXG4gICAgICAgICRjdHJsLiRvbkluaXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCd1c2VyIGVkaXQgaW5pdCcpO1xyXG4gICAgICAgICAgICBpZiAoJGN0cmwucmVzb2x2ZSkge1xyXG4gICAgICAgICAgICAgICAgJGN0cmwudXNlciA9ICRjdHJsLnJlc29sdmUudXNlcjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAkaHR0cC5nZXQoJ2FwaS91c2VyL3JvbGVzJykudGhlbihmdW5jdGlvbiAocikge1xyXG4gICAgICAgICAgICAgICAgJGN0cmwucm9sZXMgPSByLmRhdGE7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgJGN0cmwuY2FuY2VsID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAkY3RybC5kaXNtaXNzKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAkY3RybC5zYXZlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAoISRjdHJsLnVzZXIuZW1haWwpICRjdHJsLnVzZXIuZW1haWwgPSAkY3RybC51c2VyLnVzZXJOYW1lICsgJ0BzcGxjZW50ZXIub3JnJztcclxuXHJcbiAgICAgICAgICAgIHZhciByb2xlcyA9IFtdO1xyXG4gICAgICAgICAgICBfLmZvckVhY2goJGN0cmwudXNlci5yb2xlcyxcclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChyb2xlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcm9sZXMucHVzaChyb2xlLm5hbWUpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGlmIChyb2xlcy5sZW5ndGggPT09IDApIHJvbGVzLnB1c2goJ3VzZXInKTtcclxuICAgICAgICAgICAgJGN0cmwudXNlci5yb2xlcyA9IHJvbGVzO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuICRodHRwLnBvc3QoJ2FwaS91c2VyL3VwZGF0ZScsICRjdHJsLnVzZXIpLnRoZW4oZnVuY3Rpb24gKHIpIHtcclxuICAgICAgICAgICAgICAgIGFuZ3VsYXIuZXh0ZW5kKCRjdHJsLnVzZXIsIHIuZGF0YSk7XHJcbiAgICAgICAgICAgICAgICAkY3RybC5tb2RhbEluc3RhbmNlLmNsb3NlKCRjdHJsLnVzZXIpO1xyXG4gICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdzb21ldGhpbmcgd2VudCB3cm9uZycsIGVyci5tZXNzYWdlKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH1cclxuXHJcbiAgICBtb2R1bGUuY29tcG9uZW50KCd1c2VyRWRpdCcsXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBiaW5kaW5nczoge1xyXG4gICAgICAgICAgICAgICAgaXRlbTogJzwnLFxyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZTogJzwnLFxyXG4gICAgICAgICAgICAgICAgY2xvc2U6ICcmJyxcclxuICAgICAgICAgICAgICAgIGRpc21pc3M6ICcmJyxcclxuICAgICAgICAgICAgICAgIG1vZGFsSW5zdGFuY2U6ICc8J1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2FwcC91c2Vycy91c2VyLWVkaXQuY29tcG9uZW50Lmh0bWwnLFxyXG4gICAgICAgICAgICBjb250cm9sbGVyOiBbJyRodHRwJywgY29udHJvbGxlcl1cclxuICAgICAgICB9KTtcclxuXHJcbn1cclxuKSgpOyIsIi8vdXNlci1saXN0LmNvbXBvbmVudC5qc1xyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIG1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKCdhcHAnKTtcclxuXHJcbiAgICBmdW5jdGlvbiBjb250cm9sbGVyKCRodHRwLCAkbW9kYWwpIHtcclxuICAgICAgICB2YXIgJGN0cmwgPSB0aGlzO1xyXG5cclxuICAgICAgICAkY3RybC4kb25Jbml0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAkY3RybC50aXRsZSA9ICdVc2Vycyc7XHJcbiAgICAgICAgICAgICRodHRwLmdldCgnYXBpL3VzZXInKS50aGVuKGZ1bmN0aW9uIChyKSB7XHJcbiAgICAgICAgICAgICAgICAkY3RybC51c2VycyA9IHIuZGF0YTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAkY3RybC5jcmVhdGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIC8vVE9ETzogcmV0dXJuIHJvbGVzIGRpc3BsYXkgYnJva2VuXHJcbiAgICAgICAgICAgICRtb2RhbC5vcGVuKHtcclxuICAgICAgICAgICAgICAgIGNvbXBvbmVudDogJ3VzZXJFZGl0JyxcclxuICAgICAgICAgICAgICAgIGJpbmRpbmdzOiB7IG1vZGFsSW5zdGFuY2U6IFwiPFwiIH0sXHJcbiAgICAgICAgICAgICAgICBzaXplOiAnbWQnXHJcbiAgICAgICAgICAgIH0pLnJlc3VsdC50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcclxuICAgICAgICAgICAgICAgIHZhciB1c2VyID0gcmVzdWx0OyBcclxuICAgICAgICAgICAgICAgIHZhciByb2xlcyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgXy5mb3JFYWNoKHJlc3VsdC5yb2xlcyxcclxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAocm9sZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygncm9sZScsIHJvbGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByb2xlcy5wdXNoKHJvbGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgdXNlci5yb2xlcyA9IFtdOyBcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdyZXN1bHQnLCB1c2VyKTtcclxuICAgICAgICAgICAgICAgIHVzZXIucm9sZXMgPSBbXSA9IHJvbGVzO1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3JvbGVzJywgcm9sZXMpO1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3Jlc3VsdCcsIHVzZXIpO1xyXG4gICAgICAgICAgICAgICAgJGN0cmwudXNlcnMudW5zaGlmdCh1c2VyKTtcclxuICAgICAgICAgICAgfSwgZnVuY3Rpb24gKHJlYXNvbikge1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICRjdHJsLmVkaXQgPSBmdW5jdGlvbiAoaXRlbSkge1xyXG4gICAgICAgICAgICAkbW9kYWwub3Blbih7XHJcbiAgICAgICAgICAgICAgICBjb21wb25lbnQ6ICd1c2VyRWRpdCcsXHJcbiAgICAgICAgICAgICAgICBiaW5kaW5nczogeyBtb2RhbEluc3RhbmNlOiBcIjxcIiB9LFxyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZTogeyB1c2VyOiBhbmd1bGFyLmNvcHkoaXRlbSkgfSxcclxuICAgICAgICAgICAgICAgIHNpemU6ICdtZCdcclxuICAgICAgICAgICAgfSkucmVzdWx0LnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdyZXN1bHQnLCByZXN1bHQpO1xyXG4gICAgICAgICAgICAgICAgYW5ndWxhci5leHRlbmQoaXRlbSwgcmVzdWx0KTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChyZWFzb24pIHsgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAkY3RybC5kZWxldGUgPSBmdW5jdGlvbiAoYykge1xyXG4gICAgICAgICAgICAkaHR0cC5kZWxldGUoJ2FwaS91c2VyLycgKyBjLmlkKS50aGVuKGZ1bmN0aW9uIChyKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgaWR4ID0gJGN0cmwudXNlcnMuaW5kZXhPZihjKTtcclxuICAgICAgICAgICAgICAgICRjdHJsLnVzZXJzLnNwbGljZShpZHgsIDEpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG5cclxuICAgIG1vZHVsZS5jb21wb25lbnQoJ3VzZXJMaXN0JyxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnYXBwL3VzZXJzL3VzZXItbGlzdC5jb21wb25lbnQuaHRtbCcsXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6IFsnJGh0dHAnLCAnJHVpYk1vZGFsJywgY29udHJvbGxlcl1cclxuICAgICAgICB9KTtcclxuXHJcbn1cclxuKSgpOyIsIi8vdmlzaXRvci1lZGl0LmNvbXBvbmVudC5qc1xyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIG1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKCdhcHAnKTtcclxuXHJcbiAgICBmdW5jdGlvbiBjb250cm9sbGVyKCRodHRwKSB7XHJcbiAgICAgICAgdmFyICRjdHJsID0gdGhpcztcclxuXHJcbiAgICAgICAgJGN0cmwuJG9uSW5pdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coJ3Zpc2l0b3IgZWRpdCBpbml0Jyk7XHJcblxyXG4gICAgICAgICAgICAkY3RybC50aXRsZSA9ICdOZXcgVmlzaXRvcic7XHJcblxyXG4gICAgICAgICAgICBpZiAoJGN0cmwucmVzb2x2ZSkge1xyXG4gICAgICAgICAgICAgICAgJGN0cmwuaWQgPSAkY3RybC5yZXNvbHZlLmlkO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICgkY3RybC5pZCkge1xyXG4gICAgICAgICAgICAgICAgJGh0dHAuZ2V0KCdhcGkvdmlzaXRvci8nICsgJGN0cmwuaWQpLnRoZW4oZnVuY3Rpb24ocikge1xyXG4gICAgICAgICAgICAgICAgICAgICRjdHJsLnZpc2l0b3IgPSByLmRhdGE7XHJcbiAgICAgICAgICAgICAgICAgICAgJGN0cmwudGl0bGUgPSAoJGN0cmwudmlzaXRvci5maXJzdG5hbWUgKyAnICcgKyAkY3RybC52aXNpdG9yLmxhc3RuYW1lKTtcclxuICAgICAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uKGVycikge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdlcnInLCBlcnIubWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSBcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICRjdHJsLmNhbmNlbCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgJGN0cmwuZGlzbWlzcygpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgJGN0cmwuc2F2ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coJ3NhdmUgdmlzaXRvcicsICRjdHJsLnZpc2l0b3IpO1xyXG4gICAgICAgICAgICByZXR1cm4gJGh0dHAucG9zdCgnYXBpL3Zpc2l0b3InLCAkY3RybC52aXNpdG9yKS50aGVuKGZ1bmN0aW9uIChyKSB7XHJcbiAgICAgICAgICAgICAgICBhbmd1bGFyLmV4dGVuZCgkY3RybC52aXNpdG9yLCByLmRhdGEpO1xyXG4gICAgICAgICAgICAgICAgJGN0cmwubW9kYWxJbnN0YW5jZS5jbG9zZSgkY3RybC52aXNpdG9yKTtcclxuICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycikge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignc29tZXRoaW5nIHdlbnQgd3JvbmcnLCBlcnIubWVzc2FnZSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgfVxyXG5cclxuICAgIG1vZHVsZS5jb21wb25lbnQoJ3Zpc2l0b3JFZGl0JyxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGJpbmRpbmdzOiB7XHJcbiAgICAgICAgICAgICAgICBpdGVtOiAnPCcsXHJcbiAgICAgICAgICAgICAgICByZXNvbHZlOiAnPCcsXHJcbiAgICAgICAgICAgICAgICBjbG9zZTogJyYnLFxyXG4gICAgICAgICAgICAgICAgZGlzbWlzczogJyYnLFxyXG4gICAgICAgICAgICAgICAgbW9kYWxJbnN0YW5jZTogJzwnXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnYXBwL3Zpc2l0b3JzL3Zpc2l0b3ItZWRpdC5jb21wb25lbnQuaHRtbCcsXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6IFsnJGh0dHAnLCBjb250cm9sbGVyXVxyXG4gICAgICAgIH0pO1xyXG59XHJcbikoKTsiLCIvL3Zpc2l0b3ItbGlzdC5jb21wb25lbnQuanNcclxuKGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBtb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSgnYXBwJyk7XHJcblxyXG4gICAgZnVuY3Rpb24gY29udHJvbGxlcigkaHR0cCwgJG1vZGFsKSB7XHJcbiAgICAgICAgdmFyICRjdHJsID0gdGhpczsgXHJcbiAgICAgICAgdmFyIHBhZ2VTaXplRGVmYXVsdCA9IDEwO1xyXG4gICAgICAgIHZhciB0YWJsZVN0YXRlUmVmO1xyXG5cclxuICAgICAgICAkY3RybC5zZWFyY2hNb2RlbCA9IHtcclxuICAgICAgICAgICAgcGFnZTogMSxcclxuICAgICAgICAgICAgcGFnZVNpemU6IHBhZ2VTaXplRGVmYXVsdFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgICRjdHJsLiRvbkluaXQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coJ2luaXQgdmlzaXRvciBsaXN0Jyk7XHJcbiAgICAgICAgICAgICRjdHJsLnRpdGxlID0gJ1Zpc2l0b3JzJztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICRjdHJsLmNyZWF0ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgJG1vZGFsLm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgY29tcG9uZW50OiAndmlzaXRvckVkaXQnLFxyXG4gICAgICAgICAgICAgICAgYmluZGluZ3M6IHtcclxuICAgICAgICAgICAgICAgICAgICBtb2RhbEluc3RhbmNlOiBcIjxcIlxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHJlc29sdmU6IHtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBzaXplOiAnbWQnXHJcbiAgICAgICAgICAgIH0pLnJlc3VsdC50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcclxuICAgICAgICAgICAgICAgICRjdHJsLnZpc2l0b3JzLnVuc2hpZnQocmVzdWx0KTtcclxuICAgICAgICAgICAgfSwgZnVuY3Rpb24gKHJlYXNvbikge1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICRjdHJsLmVkaXQgPSBmdW5jdGlvbih2KSB7XHJcbiAgICAgICAgICAgICRtb2RhbC5vcGVuKHtcclxuICAgICAgICAgICAgICAgIGNvbXBvbmVudDogJ3Zpc2l0b3JFZGl0JyxcclxuICAgICAgICAgICAgICAgIGJpbmRpbmdzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgbW9kYWxJbnN0YW5jZTogXCI8XCJcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICByZXNvbHZlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWQ6IHYuaWRcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBzaXplOiAnbWQnXHJcbiAgICAgICAgICAgIH0pLnJlc3VsdC50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcclxuICAgICAgICAgICAgICAgIGFuZ3VsYXIuZXh0ZW5kKHYsIHJlc3VsdCk7XHJcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChyZWFzb24pIHtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAkY3RybC5kZWxldGUgPSBmdW5jdGlvbih2KSB7XHJcbiAgICAgICAgICAgICRodHRwLmRlbGV0ZSgnYXBpL3Zpc2l0b3IvJyArIHYuaWQpLnRoZW4oZnVuY3Rpb24ocikge1xyXG4gICAgICAgICAgICAgICAgdmFyIGlkeCA9ICRjdHJsLnZpc2l0b3JzLmluZGV4T2Yodik7XHJcbiAgICAgICAgICAgICAgICAkY3RybC52aXNpdG9ycy5zcGxpY2UoaWR4LCAxKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAkY3RybC5zZWFyY2ggPSBmdW5jdGlvbiAodGFibGVTdGF0ZSkge1xyXG4gICAgICAgICAgICB0YWJsZVN0YXRlUmVmID0gdGFibGVTdGF0ZTtcclxuICAgICAgICAgICAgJGN0cmwuc2VhcmNoTW9kZWwuZnV6enlNYXRjaFJhbmdlID0gJGN0cmwuZnV6enlNYXRjaFJhbmdlOyBcclxuICAgICAgICAgICAgJGN0cmwuc2VhcmNoTW9kZWwuZGF5c09sZCA9ICRjdHJsLmRheXM7XHJcblxyXG4gICAgICAgICAgICBpZiAodHlwZW9mICh0YWJsZVN0YXRlLnNvcnQucHJlZGljYXRlKSAhPT0gXCJ1bmRlZmluZWRcIikge1xyXG4gICAgICAgICAgICAgICAgJGN0cmwuc2VhcmNoTW9kZWwub3JkZXJCeSA9IHRhYmxlU3RhdGUuc29ydC5wcmVkaWNhdGU7XHJcbiAgICAgICAgICAgICAgICAkY3RybC5zZWFyY2hNb2RlbC5vcmRlckRpcmVjdGlvbiA9IHRhYmxlU3RhdGUuc29ydC5yZXZlcnNlID8gJ2Rlc2MnIDogJ2FzYyc7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICRodHRwLmdldCgnYXBpL3Zpc2l0b3InLCB7IHBhcmFtczogJGN0cmwuc2VhcmNoTW9kZWwgfSkudGhlbihmdW5jdGlvbiAocikge1xyXG4gICAgICAgICAgICAgICAgJGN0cmwudmlzaXRvcnMgPSByLmRhdGEucmVzdWx0cztcclxuICAgICAgICAgICAgICAgICRjdHJsLnNlYXJjaE1vZGVsID0gci5kYXRhO1xyXG4gICAgICAgICAgICAgICAgZGVsZXRlICRjdHJsLnNlYXJjaE1vZGVsLnJlc3VsdHM7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgJGN0cmwucGFnZWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICRjdHJsLnNlYXJjaCh0YWJsZVN0YXRlUmVmKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG5cclxuICAgIG1vZHVsZS5jb21wb25lbnQoJ3Zpc2l0b3JMaXN0JyxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnYXBwL3Zpc2l0b3JzL3Zpc2l0b3ItbGlzdC5jb21wb25lbnQuaHRtbCcsXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6IFsnJGh0dHAnLCAnJHVpYk1vZGFsJywgY29udHJvbGxlcl1cclxuICAgICAgICB9KTtcclxufVxyXG4pKCk7Il19
