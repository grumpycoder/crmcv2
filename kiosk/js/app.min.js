!function(){var e=angular.module("app",["ngComponentRouter"]);e.component("kiosk",{template:"<ng-outlet>Loading ..</ng-outlet >",$routeConfig:[{path:"/",name:"Welcome",component:"welcome",useAsDefault:!0},{path:"/register",name:"Register",component:"register"},{path:"/pledge",name:"Pledge",component:"pledge"},{path:"/finish",name:"Finish",component:"finish"},{path:"/search",name:"Search",component:"search"},{path:"/results",name:"Results",component:"results"}]}),e.value("$routerRootComponent","kiosk")}();
!function(){function n(n,t){var o=this;o.countDownWatch=function(){o.countDown_tick<=0?(n.clear(),o.$router.navigate(["Welcome"])):(o.countDown_tick--,t(o.countDownWatch,1e3))},o.$onInit=function(){console.log("finish init"),o.countDown_tick=3,o.countDownWatch()},this.$routerOnActivate=function(n){o.$router=this.$router}}var t=angular.module("app");t.component("finish",{bindings:{$router:"<"},templateUrl:"app/finish.component.html",controller:["visitorService","$timeout",n]})}();
!function(){function o(o){var e=this;e.$onInit=function(){e.visitor=o.get(),console.log("pledge init",e)},this.$routerOnActivate=function(o){},e.gotoWelcome=function(){console.log("goto welcome"),o.clear(),this.$router.navigate(["Welcome"])},e.gotoRegister=function(){console.log("goto register"),this.$router.navigate(["Register"])},e.pledge=function(){console.log("save visitor"),this.$router.navigate(["Finish"])}}var e=angular.module("app");e.component("pledge",{bindings:{$router:"<"},templateUrl:"app/pledge.component.html",controller:["visitorService",o]})}();
!function(){function e(e){var o=this;o.$onInit=function(){o.visitor=e.get(),console.log("visitor service")},o.gotoWelcome=function(){this.$router.navigate(["Welcome"])},o.gotoPledge=function(){this.$router.navigate(["Pledge"])}}var o=angular.module("app");o.component("register",{bindings:{$router:"<"},templateUrl:"app/register.component.html",controller:["visitorService",e]})}();
!function(){function o(o){var e=this;e.paging={currentPage:1},e.$onInit=function(){console.log("search init",o.getTerm()),e.visitors=o.search(),console.log("visitors",e.visitors)},e.gotoWelcome=function(){console.log("goto welcome"),this.$router.navigate(["Welcome"])},e.gotoSearch=function(){console.log("search"),this.$router.navigate(["Search"])},e.pledge=function(){console.log("pledge"),this.$router.navigate(["Pledge"])},e.toggleName=function(o){e.visitor=o,console.log("visitor selected",e.visitor)},e.pageChanged=function(o){console.log("paged",o)}}var e=angular.module("app");e.component("results",{bindings:{$router:"<"},templateUrl:"app/results.component.html",controller:["visitorService",o]})}();
!function(){function e(e){var o=this;o.$onInit=function(){console.log("search init")},o.gotoWelcome=function(){console.log("goto welcome"),e.clear(),this.$router.navigate(["Welcome"])},o.gotoSearchResults=function(){console.log("search results"),e.setTerm(o.searchTerm),this.$router.navigate(["Results"])}}var o=angular.module("app");o.component("search",{bindings:{$router:"<"},templateUrl:"app/search.component.html",controller:["visitorService",e]})}();
!function(){function o(o){var n=this;n.$onInit=function(){console.log("welcome init",n),console.log("visitor",o.get()),$.connection.hub.url="http://localhost:49960/signalr";$.connection.nameNotificationHub;$.connection.hub.start().done(function(){console.log("hub connection started")})},this.$routerOnActivate=function(o){},n.gotoRegister=function(){console.log("register"),this.$router.navigate(["Register"])},n.gotoSearch=function(){console.log("goto search"),this.$router.navigate(["Search"])}}var n=angular.module("app");n.component("welcome",{bindings:{$router:"<"},templateUrl:"app/welcome.component.html",controller:["visitorService",o]})}();
!function(){function e(){function e(){c={}}function n(){return c}function a(){return i}function t(e){c=e}function r(e){i=e}function o(e){return console.log("search for "+e),[{firstname:"Mark",lastname:"Lawrence",zipcode:"11111"},{firstname:"John",lastname:"Doe",zipcode:"11111"},{firstname:"Brent",lastname:"Jones",zipcode:"11111"},{firstname:"Hugh",lastname:"Jackman",zipcode:"11111"},{firstname:"Jack",lastname:"Mandela",zipcode:"11111"}]}var c={},i="";return{clear:e,get:n,getTerm:a,set:t,setTerm:r,search:o}}var n=angular.module("app");n.factory("visitorService",["$http",e])}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
