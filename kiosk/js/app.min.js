!function(){var t=angular.module("app",["ngComponentRouter","ngAnimate","ui.bootstrap","ngMessages","onScreenKeyboard","utils.autofocus","treasure-overlay-spinner","LocalStorageModule"]);t.component("kiosk",{template:"<ng-outlet>Loading ..</ng-outlet >",$routeConfig:[{path:"/",name:"Welcome",component:"welcome",useAsDefault:!0},{path:"/register",name:"Register",component:"register"},{path:"/pledge",name:"Pledge",component:"pledge"},{path:"/finish",name:"Finish",component:"finish"},{path:"/search",name:"Search",component:"search"},{path:"/results",name:"Results",component:"results"},{path:"/settings",name:"Settings",component:"settings"}]}),t.value("$routerRootComponent","kiosk"),t.value("config",{host:window.location.hostname,apiUrlBase:"http://localhost:49960/api/",apiUrl:"http://localhost:49960/api/visitor",hubUrl:"http://localhost:49960/signalr",redirectTimeout:3e4,finishTimeout:4,kiosk:1}),t.run(["config",function(t){switch(t.host){case"crmckiosk":t.apiUrlBase="http://crmc/api/",t.apiUrl="http://crmc/api/visitor",t.hubUrl="http://crmc/signalr";break;case"crmckiosk-test.splcenter.org":t.apiUrlBase="http://crmc-test/api/",t.apiUrl="http://crmc-test/api/visitor",t.hubUrl="http://crmc-test/signalr";break;case"crmckiosk.splcenter.org":t.apiUrlBase="http://crmc/api/",t.apiUrl="http://crmc/api/visitor",t.hubUrl="http://crmc/signalr"}}])}();
!function(){function n(n,o,t,i){var e,c=this;c.$onInit=function(){console.log("finish init",n),c.kiosk=i.get("kiosk")||1,$.connection.hub.url=n.hubUrl,e=$.connection.nameNotificationHub,c.countDown_tick=n.finishTimeout,c.startTimer()},this.$routerOnActivate=function(n){c.$router=this.$router},c.startTimer=function(){c.countDown_tick<=0?(console.log("timer finished"),$.connection.hub.start().done(function(){console.log("hub connection started"),e.server.addName(c.kiosk,o.get())}),c.$router.navigate(["Welcome"])):(c.countDown_tick--,t(c.startTimer,1e3))}}var o=angular.module("app");o.component("finish",{bindings:{$router:"<"},templateUrl:"app/finish.component.html",controller:["config","visitorService","$timeout","localStorageService",n]})}();
!function(){function e(e,t,n){var i,o=this;o.$onInit=function(){console.log("pledge init"),o.visitor=n.get(),o.startTimer()},this.$routerOnActivate=function(e,t){},o.gotoWelcome=function(){e.cancel(i),this.$router.navigate(["Welcome"])},o.gotoRegister=function(){e.cancel(i),n.getTerm().length>0?this.$router.navigate(["Results"]):this.$router.navigate(["Register"])},o.pledge=function(){n.get().id?console.log("returning visitor",n.get()):(console.log("save new visitor",n.get()),n.save()),e.cancel(i),this.$router.navigate(["Finish"])},o.startTimer=function(){e.cancel(i),i=e(function(){o.$router.navigate(["Welcome"])},t.redirectTimeout)}}var t=angular.module("app");t.component("pledge",{bindings:{$router:"<"},templateUrl:"app/pledge.component.html",controller:["$timeout","config","visitorService",e]})}();
!function(){function t(t,e,r,n,o,i){function a(){n.$watchCollection("$ctrl.visitor",function(t){if(void 0!==t.firstname){var e=t.firstname+t.lastname;if(e=e.replace(/ /g,""),e.length>0){var r=c(e.toUpperCase());u.form.lastname.$setValidity("blacklist",r)}}})}function c(t){for(var e=i.get(),r=0;r<e.length;r++)if(t.match((".*"+e[r].trim()+".*").replace(" ",".*")))return!1;return!0}var l,u=this;u.$onInit=function(){u.visitor=e.get(),o.get(t.apiUrlBase+"censor").then(function(e){return o.get(t.apiUrlBase+"censor").then(function(t){var e=[];t.data.length>0&&t.data.forEach(function(t){null!==t.word&&e.push(t.word.replace(/ /g,"").toUpperCase())}),i.set(e)})}),a(),u.startTimer()},this.$routerOnActivate=function(t){u.$router=this.$router},u.gotoWelcome=function(){r.cancel(l),this.$router.navigate(["Welcome"])},u.gotoPledge=function(){r.cancel(l),this.$router.navigate(["Pledge"])},u.startTimer=function(){r.cancel(l),l=r(function(){u.$router.navigate(["Welcome"])},t.redirectTimeout)}}var e=angular.module("app");e.component("register",{bindings:{$router:"<"},templateUrl:"app/register.component.html",controller:["config","visitorService","$timeout","$scope","$http","censorService",t]})}();
!function(){function e(e,t,n){var o,r,a=this,i=10;a.searchModel={page:1,pageSize:i},a.paging={currentPage:1},a.$onInit=function(){console.log("search init");const e=n.getTerm().split(" ");e.length>1?(a.searchModel.firstname=e[0],a.searchModel.lastname=e[1]):a.searchModel.lastname=e[0],a.search()},a.gotoWelcome=function(){t.cancel(o),this.$router.navigate(["Welcome"])},a.gotoSearch=function(){t.cancel(o),this.$router.navigate(["Search"])},a.pledge=function(){t.cancel(o),this.$router.navigate(["Pledge"])},a.toggleName=function(e){a.visitor=e,n.set(e),a.startTimer()},a.search=function(e){return r=e,a.loading=!0,n.search(a.searchModel).then(function(e){a.visitors=e.results,a.searchModel=e,delete a.searchModel.results,a.startTimer(),a.loading=!1})},a.paged=function(){a.visitor=null,a.search(r)},a.startTimer=function(){t.cancel(o),o=t(function(){a.$router.navigate(["Welcome"])},e.redirectTimeout)}}var t=angular.module("app");t.component("results",{bindings:{$router:"<"},templateUrl:"app/results.component.html",controller:["config","$timeout","visitorService",e]})}();
!function(){function e(e,t,n){var o,r=this;r.$onInit=function(){console.log("search init"),r.searchTerm=t.getTerm(),r.startTimer()},r.gotoWelcome=function(){n.cancel(o),this.$router.navigate(["Welcome"])},r.gotoSearchResults=function(){t.setTerm(r.searchTerm),n.cancel(o),this.$router.navigate(["Results"])},r.startTimer=function(){n.cancel(o),o=n(function(){r.$router.navigate(["Welcome"])},e.redirectTimeout)}}var t=angular.module("app");t.component("search",{bindings:{$router:"<"},templateUrl:"app/search.component.html",controller:["config","visitorService","$timeout",e]})}();
!function(){function o(o){var t=this;t.availableKiosks=[1,2,3,4],t.kiosk=1,t.$onInit=function(){console.log("settings init"),t.kiosk=o.get("kiosk")||1},this.$routerOnActivate=function(o){},t.gotoWelcome=function(){this.$router.navigate(["Welcome"])},t.kioskChange=function(){o.set("kiosk",t.kiosk)}}var t=angular.module("app");t.component("settings",{bindings:{$router:"<"},templateUrl:"app/settings.component.html",controller:["localStorageService",o]})}();
!function(){function t(t){var e=this,n="";e.$onInit=function(){console.log("welcome init"),t.clearTerm(),t.clear()},this.$routerOnActivate=function(t){},e.gotoRegister=function(){this.$router.navigate(["Register"])},e.gotoSearch=function(){this.$router.navigate(["Search"])},e.unlock=function(t){n.length>4?n=t:n+=t.toString(),"1212"===n&&this.$router.navigate(["Settings"])}}var e=angular.module("app");e.component("welcome",{bindings:{$router:"<"},templateUrl:"app/welcome.component.html",controller:["visitorService",t]})}();
angular.module("onScreenKeyboard",["ngSanitize"]).directive("onScreenKeyboard",["$timeout","$document",function(t,e){"use strict";return{restrict:"E",bindToController:!0,controllerAs:"ctrl",scope:{rows:"=?",uppercaseAllWords:"@"},controller:["$sce",function(t){var e=this;e.rows||(e.rows=[["1","2","3","4","5","6","7","8","9","0",{type:"erase",colspan:2,text:"&lArr;"}],["q","w","e","r","t","y","u","i","o","p","@"],["a","s","d","f","g","h","j","k","l","-","_",{type:"margin"}],[{type:"shift"},"z","x","c","v","b","n","m",",",".",{type:"shift"}],[{type:"margin"},{type:"space",colspan:9,text:" "}]]),e.getText=function(e){if("margin"===e.type)return"";if("shift"===e.type)return"&dArr;";var r=e.text||e;return r&&r.indexOf("&")>-1?t.trustAsHtml(r):r}}],link:function(r,n,s){var a=r.ctrl;n.bind("contextmenu",function(t){return t.preventDefault(),!1}),a.isUpperCase=!1,a.lastInputCtrl=null,a.startPos=null,a.endPos=null,a.printKeyStroke=function(t){if(a.lastInputCtrl){var e=angular.element(t.target||t.srcElement);if(e.hasClass("erase"))return void a.eraseKeyStroke();if(e.hasClass("shift"))return void a.inverseCase();var r=angular.element(a.lastInputCtrl),n=r.val(),s=n.substring(0,a.startPos),l=n.substring(a.endPos,n.length);r.val(s+e.text()+l),r.triggerHandler("change"),a.startPos++,a.endPos++,a.setKeyboardLayout()}},a.inverseCase=function(){},a.refocus=function(){a.lastInputCtrl.focus()},a.eraseKeyStroke=function(){if(a.lastInputCtrl){var t=a.startPos!==a.endPos,e=angular.element(a.lastInputCtrl),r=e.val(),n=r.substring(0,t?a.startPos:a.startPos-1),s=r.substring(a.endPos,r.length);e.val(n+s),e.triggerHandler("change"),t?a.endPos=a.startPos:(a.startPos--,a.endPos--),a.lastInputCtrl.selectionStart=a.startPos,a.lastInputCtrl.selectionEnd=a.startPos,a.setKeyboardLayout(),a.refocus()}},a.setKeyboardLayout=function(){return a.lastInputCtrl?void(a.lastInputCtrl.className&&a.isUpperCase?a.inverseCase():0===angular.element(a.lastInputCtrl).val().length?a.isUpperCase||(a.isUpperCase=!1,a.inverseCase()):" "===angular.element(a.lastInputCtrl).val().slice(-1)&&!a.isUpperCase&&s.hasOwnProperty("uppercaseAllWords")?a.inverseCase():(a.isUpperCase=!0,a.inverseCase())):(a.isUpperCase=!1,void a.inverseCase())},e.find("input").bind("blur focus",function(){a.setKeyboardLayout(),a.lastInputCtrl=this,a.lastInputCtrl&&"checkbox"!==a.lastInputCtrl.type&&(a.startPos=a.lastInputCtrl.selectionStart,a.endPos=a.lastInputCtrl.selectionEnd)}).bind("keydown",function(){a.startPos=a.lastInputCtrl.selectionStart,a.endPos=a.lastInputCtrl.selectionEnd}),t(function(){a.inverseCase()},0)},templateUrl:"/templates/angular-on-screen-keyboard.html"}}]),angular.module("onScreenKeyboard").run(["$templateCache",function(t){"use strict";t.put("/templates/angular-on-screen-keyboard.html","<div class=keyboard><table><tr ng-repeat=\"row in ctrl.rows\"><td ng-repeat=\"key in row\" ng-click=ctrl.printKeyStroke($event) colspan=\"{{key.colspan || 1}}\" ng-class=\"{'button': key.type !== 'margin', 'letter': key.type !== 'margin'}\" class={{key.type}} ng-bind-html=ctrl.getText(key)></td></tr></table></div>")}]);
angular.module("app").directive("blacklist",["$timeout","$q","censorService",function(e,r,t){return{restrict:"A",require:"ngModel",link:function(e,i,n,c){function o(e){for(var r=t.get(),i=0;i<r.length;i++)if(e.toUpperCase().match((".*"+r[i].trim()+".*").replace(" ",".*")))return!1;return!0}c.$asyncValidators.blacklist=function(e,t){if(c.$isEmpty(e))return r.resolve();var i=r.defer();return o(e)?i.resolve():i.reject(),i.promise}}}}]);
angular.module("utils.autofocus",[]).directive("autofocus",["$timeout",function(u){return{restrict:"A",link:function(t,o){u(function(){o[0].focus()})}}}]);
!function(){function n(n,t,r){var c=[];return{set:function(n){c=n},get:function(){return c}}}var t=angular.module("app");t.factory("censorService",["$q","$http","config",n])}();
!function(){function n(n,t){function e(){s={}}function r(){g=""}function o(){return s}function c(){return g}function i(n){s=n}function u(n){g=n}function a(e){return n.get(t.apiUrl,{params:e}).then(function(n){return n.data})}function f(e){n.post(t.apiUrl,s).then(function(n){console.log("saved new visitor",s)}).catch(function(n){console.error("something went wrong",n.message)})}var s={},g="";return{clear:e,clearTerm:r,get:o,getTerm:c,set:i,setTerm:u,save:f,search:a}}var t=angular.module("app");t.factory("visitorService",["$http","config",n])}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
