!function(){var e=angular.module("app",["ngComponentRouter","ui.bootstrap"]);e.component("kiosk",{template:"<ng-outlet>Loading ..</ng-outlet >",$routeConfig:[{path:"/",name:"Welcome",component:"welcome",useAsDefault:!0},{path:"/register",name:"Register",component:"register"},{path:"/pledge",name:"Pledge",component:"pledge"},{path:"/finish",name:"Finish",component:"finish"},{path:"/search",name:"Search",component:"search"},{path:"/results",name:"Results",component:"results"}]}),e.value("$routerRootComponent","kiosk")}();
!function(){function n(n,t){var o=this;o.countDownWatch=function(){o.countDown_tick<=0?(n.clear(),o.$router.navigate(["Welcome"])):(o.countDown_tick--,t(o.countDownWatch,1e3))},o.$onInit=function(){console.log("finish init",n.get()),$.connection.hub.url="http://localhost:49960/signalr";var t=$.connection.nameNotificationHub;$.connection.hub.start().done(function(){console.log("hub connection started"),t.server.addName(1,n.get())}),o.countDown_tick=3,o.countDownWatch()},this.$routerOnActivate=function(n){o.$router=this.$router}}var t=angular.module("app");t.component("finish",{bindings:{$router:"<"},templateUrl:"app/finish.component.html",controller:["visitorService","$timeout",n]})}();
!function(){function t(t,e){var o=this;o.$onInit=function(){o.visitor=e.get(),console.log("pledge init",o)},this.$routerOnActivate=function(t){},o.gotoWelcome=function(){e.clear(),this.$router.navigate(["Welcome"])},o.gotoRegister=function(){this.$router.navigate(["Register"])},o.pledge=function(){e.get().id?console.log("returning visitor",e.get()):(console.log("save new visitor",e.get()),t.post("http://localhost:49960/api/visitor",e.get()).then(function(t){console.log("saved new visitor",e.get())}).catch(function(t){console.error("something went wrong",t.message)})),this.$router.navigate(["Finish"])}}var e=angular.module("app");e.component("pledge",{bindings:{$router:"<"},templateUrl:"app/pledge.component.html",controller:["$http","visitorService",t]})}();
!function(){function e(e){var o=this;o.$onInit=function(){o.visitor=e.get(),console.log("visitor service")},o.gotoWelcome=function(){this.$router.navigate(["Welcome"])},o.gotoPledge=function(){this.$router.navigate(["Pledge"])}}var o=angular.module("app");o.component("register",{bindings:{$router:"<"},templateUrl:"app/register.component.html",controller:["visitorService",e]})}();
!function(){function e(e,t){var o,a=this,s=10;a.searchModel={page:1,pageSize:s},a.paging={currentPage:1},a.$onInit=function(){console.log("search init",t.getTerm());const o=t.getTerm().split(" ");o.length>1?(a.searchModel.firstname=o[0],a.searchModel.lastname=o[1]):a.searchModel.lastname=o[0],e.get("http://localhost:49960/api/visitor",{params:a.searchModel}).then(function(e){a.visitors=e.data.results,a.searchModel=e.data,delete a.searchModel.results,console.log("visitors",a.visitors)})},a.gotoWelcome=function(){this.$router.navigate(["Welcome"])},a.gotoSearch=function(){this.$router.navigate(["Search"])},a.pledge=function(){t.clearTerm(),this.$router.navigate(["Pledge"])},a.toggleName=function(e){a.visitor=e,t.set(e)},a.search=function(t){o=t,e.get("http://localhost:49960/api/visitor",{params:a.searchModel}).then(function(e){a.visitors=e.data.results,a.searchModel=e.data,delete a.searchModel.results})},a.paged=function(){a.search(o)}}var t=angular.module("app");t.component("results",{bindings:{$router:"<"},templateUrl:"app/results.component.html",controller:["$http","visitorService",e]})}();
!function(){function e(e){var t=this;t.$onInit=function(){console.log("search init"),t.searchTerm=e.getTerm()},t.gotoWelcome=function(){e.clear(),this.$router.navigate(["Welcome"])},t.gotoSearchResults=function(){e.setTerm(t.searchTerm),this.$router.navigate(["Results"])}}var t=angular.module("app");t.component("search",{bindings:{$router:"<"},templateUrl:"app/search.component.html",controller:["visitorService",e]})}();
!function(){function t(t){var e=this;e.$onInit=function(){console.log("welcome init",t.get())},this.$routerOnActivate=function(t){},e.gotoRegister=function(){this.$router.navigate(["Register"])},e.gotoSearch=function(){this.$router.navigate(["Search"])}}var e=angular.module("app");e.component("welcome",{bindings:{$router:"<"},templateUrl:"app/welcome.component.html",controller:["visitorService",t]})}();
!function(){function e(){function e(){i={}}function n(){s=""}function a(){return i}function t(){return s}function r(e){i=e}function c(e){s=e}function o(e){return console.log("search for "+e),[{firstname:"Mark",lastname:"Lawrence",zipcode:"11111"},{firstname:"John",lastname:"Doe",zipcode:"11111"},{firstname:"Brent",lastname:"Jones",zipcode:"11111"},{firstname:"Hugh",lastname:"Jackman",zipcode:"11111"},{firstname:"Jack",lastname:"Mandela",zipcode:"11111"}]}var i={},s="";return{clear:e,clearTerm:n,get:a,getTerm:t,set:r,setTerm:c,search:o}}var n=angular.module("app");n.factory("visitorService",["$http",e])}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
